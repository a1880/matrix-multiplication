
"""
akDumpNumpyTensor.py  -  Tool to write a NumPy tensor in a file in matrix multiplication
                         tensor format.
                         The source data was provided by DeepMind AlphaEvolve

Axel Kemper  16-May-2025

"""
from ast import Tuple
import datetime
from dis import pretty_flags
import math
from pprint import PrettyPrinter
import numpy as np

# Source:
# AlphaEvolve: A coding agent for scientific and algorithmic discovery
# https://storage.googleapis.com/deepmind-media/DeepMind.com/Blog/alphaevolve-a-gemini-powered-coding-agent-for-designing-advanced-algorithms/AlphaEvolve.pdf

""" output file """
wrf = None
wrf_line_count = 0

#@title Data
decomposition_444 = (np.array([[ 0.5+0.5j,  0.5+0.5j,  0. +0.j ,  0. -0.5j,  0.5+0.5j,  0. +0.j ,
         0. +0.5j,  0.5+0.5j,  0. -0.5j, -0.5+0.5j, -0.5+0.5j,  0.5+0.j ,
         0. +0.j , -0. +0.j ,  0. +0.5j,  0. +0.j , -0.5+0.j ,  0.5+0.5j,
         0. +0.5j,  0. -0.j ,  0. +0.j ,  0. +0.5j, -0.5-0.5j, -0. +0.j ,
        -0.5+0.j ,  0. +0.j ,  0. +0.j ,  0. -0.5j, -0.5+0.5j,  0.5+0.5j,
        -0. +0.j ,  0.5+0.j , -0. +0.j ,  0.5+0.j ,  0. -0.5j,  0. +0.j ,
        -0. +0.j ,  0.5+0.j ,  0. +0.j , -0.5+0.j , -0.5-0.5j,  0.5-0.5j,
         0.5+0.5j,  0. +0.5j,  0. -0.j , -0.5+0.5j,  0.5-0.5j,  0.5+0.j ],
       [ 0.5+0.5j,  0. +0.j , -0.5+0.j , -0.5+0.j , -0.5-0.5j,  0. +0.j ,
         0. +0.j , -0.5-0.5j,  0. -0.5j,  0. -0.j ,  0.5-0.5j,  0.5+0.j ,
         0.5+0.5j,  0.5-0.5j, -0.5+0.j ,  0. +0.j , -0. +0.5j,  0.5+0.5j,
        -0. +0.5j,  0. +0.j ,  0.5+0.5j,  0. -0.5j,  0. +0.j ,  0. +0.j ,
         0.5+0.j , -0. +0.j ,  0.5+0.5j,  0. -0.5j, -0.5+0.5j, -0. +0.j ,
         0.5+0.5j, -0.5+0.j ,  0. +0.j , -0. +0.5j,  0. +0.5j, -0. +0.j ,
        -0.5-0.5j,  0. -0.5j,  0.5-0.5j,  0. -0.5j, -0.5-0.5j,  0. -0.j ,
         0. -0.j ,  0.5+0.j ,  0. +0.j ,  0.5-0.5j,  0. +0.j , -0. +0.5j],
       [ 0. +0.j ,  0. +0.j ,  0.5+0.j ,  0.5+0.j ,  0. +0.j ,  0.5-0.5j,
         0. +0.j ,  0. +0.j , -0.5-0.j ,  0. +0.j ,  0. -0.j ,  0. -0.5j,
        -0.5-0.5j, -0.5+0.5j,  0.5+0.j , -0.5+0.5j,  0. +0.5j,  0. +0.j ,
        -0.5+0.j ,  0.5-0.5j, -0.5-0.5j, -0.5-0.j ,  0. -0.j , -0.5-0.5j,
         0. -0.5j,  0.5-0.5j,  0.5+0.5j,  0.5+0.j ,  0. -0.j ,  0. +0.j ,
         0.5+0.5j,  0. -0.5j,  0.5+0.5j,  0. -0.5j, -0.5+0.j ,  0.5-0.5j,
        -0.5-0.5j,  0. -0.5j,  0.5-0.5j,  0. -0.5j,  0. +0.j ,  0. +0.j ,
        -0. +0.j , -0.5-0.j ,  0.5-0.5j,  0. -0.j ,  0. +0.j , -0. +0.5j],
       [ 0. +0.j , -0.5+0.5j,  0. +0.j , -0.5-0.j ,  0. -0.j , -0.5-0.5j,
         0.5+0.j ,  0. +0.j ,  0. -0.5j, -0.5-0.5j,  0. +0.j , -0.5+0.j ,
         0. +0.j , -0. +0.j , -0.5+0.j ,  0.5+0.5j,  0. -0.5j,  0. +0.j ,
        -0. +0.5j,  0.5+0.5j,  0. +0.j ,  0. -0.5j, -0.5+0.5j,  0.5-0.5j,
        -0.5-0.j ,  0.5+0.5j,  0. +0.j , -0. +0.5j,  0. +0.j ,  0.5-0.5j,
         0. -0.j ,  0.5+0.j ,  0.5-0.5j,  0. -0.5j,  0. +0.5j,  0.5+0.5j,
         0. +0.j ,  0. -0.5j,  0. +0.j ,  0. -0.5j,  0. +0.j , -0.5-0.5j,
        -0.5+0.5j, -0.5-0.j , -0.5-0.5j,  0. +0.j ,  0.5+0.5j,  0. -0.5j],
       [ 0.5-0.5j,  0.5+0.5j, -0. +0.j , -0. +0.5j, -0.5+0.5j,  0. +0.j ,
        -0.5+0.j , -0.5-0.5j,  0.5+0.j ,  0.5+0.5j, -0.5+0.5j, -0.5-0.j ,
        -0. +0.j ,  0. -0.j ,  0.5+0.j ,  0. -0.j , -0.5-0.j ,  0.5+0.5j,
        -0. +0.5j,  0. -0.j ,  0. +0.j ,  0. -0.5j,  0.5-0.5j,  0. -0.j ,
         0. -0.5j,  0. +0.j ,  0. +0.j , -0.5+0.j , -0.5-0.5j, -0.5-0.5j,
        -0. +0.j ,  0.5+0.j ,  0. -0.j , -0.5+0.j , -0.5-0.j ,  0. -0.j ,
        -0. +0.j , -0. +0.5j, -0. +0.j , -0.5+0.j ,  0.5+0.5j, -0.5+0.5j,
         0.5-0.5j,  0.5+0.j , -0. +0.j ,  0.5+0.5j,  0.5-0.5j, -0. +0.5j],
       [ 0.5-0.5j, -0. +0.j ,  0. -0.5j, -0.5+0.j ,  0.5-0.5j,  0. +0.j ,
         0. -0.j ,  0.5+0.5j,  0.5+0.j ,  0. +0.j ,  0.5-0.5j, -0.5-0.j ,
        -0.5+0.5j,  0.5-0.5j,  0. -0.5j,  0. -0.j ,  0. -0.5j,  0.5+0.5j,
        -0. +0.5j,  0. +0.j ,  0.5+0.5j,  0. +0.5j,  0. +0.j ,  0. -0.j ,
        -0. +0.5j,  0. +0.j , -0.5-0.5j, -0.5+0.j , -0.5-0.5j, -0. +0.j ,
        -0.5-0.5j, -0.5+0.j ,  0. +0.j , -0. +0.5j,  0.5+0.j ,  0. +0.j ,
        -0.5+0.5j, -0.5+0.j , -0.5-0.5j,  0. +0.5j,  0.5+0.5j,  0. -0.j ,
         0. +0.j ,  0. +0.5j,  0. +0.j , -0.5-0.5j,  0. -0.j ,  0.5+0.j ],
       [ 0. -0.j , -0. +0.j , -0. +0.5j,  0.5+0.j ,  0. +0.j ,  0.5-0.5j,
         0. -0.j , -0. +0.j ,  0. -0.5j,  0. -0.j ,  0. -0.j ,  0. +0.5j,
         0.5-0.5j, -0.5+0.5j, -0. +0.5j,  0.5-0.5j,  0. -0.5j,  0. +0.j ,
        -0.5+0.j ,  0.5-0.5j, -0.5-0.5j,  0.5+0.j ,  0. +0.j ,  0.5-0.5j,
         0.5+0.j , -0.5-0.5j, -0.5-0.5j,  0. -0.5j,  0. -0.j ,  0. +0.j ,
        -0.5-0.5j,  0. -0.5j, -0.5+0.5j,  0. -0.5j, -0. +0.5j, -0.5+0.5j,
        -0.5+0.5j, -0.5+0.j , -0.5-0.5j, -0. +0.5j,  0. -0.j ,  0. +0.j ,
         0. -0.j ,  0. -0.5j, -0.5-0.5j, -0. +0.j , -0. +0.j ,  0.5+0.j ],
       [ 0. +0.j , -0.5+0.5j,  0. +0.j ,  0.5+0.j ,  0. +0.j , -0.5-0.5j,
         0. +0.5j,  0. -0.j ,  0.5+0.j , -0.5+0.5j,  0. +0.j ,  0.5+0.j ,
         0. +0.j ,  0. -0.j , -0. +0.5j, -0.5-0.5j,  0. -0.5j,  0. -0.j ,
         0. +0.5j,  0.5+0.5j,  0. -0.j ,  0. +0.5j, -0.5-0.5j,  0.5+0.5j,
         0. -0.5j,  0.5-0.5j,  0. +0.j ,  0.5+0.j ,  0. +0.j , -0.5+0.5j,
         0. +0.j ,  0.5+0.j ,  0.5+0.5j,  0. +0.5j,  0.5+0.j , -0.5-0.5j,
        -0. +0.j ,  0.5+0.j ,  0. +0.j ,  0. -0.5j,  0. +0.j ,  0.5+0.5j,
         0.5+0.5j, -0. +0.5j, -0.5+0.5j,  0. +0.j ,  0.5+0.5j,  0.5+0.j ],
       [ 0.5-0.5j, -0.5-0.5j,  0. -0.j ,  0. -0.5j, -0.5+0.5j,  0. +0.j ,
         0.5+0.j , -0.5-0.5j, -0.5-0.j , -0.5-0.5j,  0.5-0.5j,  0.5+0.j ,
        -0. +0.j , -0. +0.j ,  0.5+0.j , -0. +0.j , -0.5-0.j ,  0.5+0.5j,
        -0. +0.5j,  0. +0.j ,  0. -0.j ,  0. -0.5j,  0.5-0.5j,  0. +0.j ,
         0. -0.5j,  0. +0.j ,  0. +0.j , -0.5-0.j ,  0.5+0.5j,  0.5+0.5j,
         0. +0.j , -0.5+0.j ,  0. -0.j , -0.5-0.j ,  0.5+0.j ,  0. -0.j ,
         0. +0.j , -0. +0.5j,  0. +0.j ,  0.5+0.j , -0.5-0.5j, -0.5+0.5j,
         0.5-0.5j, -0.5-0.j ,  0. -0.j , -0.5-0.5j,  0.5-0.5j,  0. -0.5j],
       [ 0.5-0.5j, -0. +0.j ,  0. +0.5j, -0.5+0.j ,  0.5-0.5j,  0. +0.j ,
         0. +0.j ,  0.5+0.5j, -0.5-0.j ,  0. +0.j , -0.5+0.5j,  0.5+0.j ,
        -0.5+0.5j,  0.5-0.5j, -0. +0.5j,  0. +0.j , -0. +0.5j,  0.5+0.5j,
        -0. +0.5j,  0. -0.j , -0.5-0.5j,  0. +0.5j,  0. +0.j ,  0. +0.j ,
         0. +0.5j,  0. +0.j ,  0.5+0.5j, -0.5-0.j ,  0.5+0.5j, -0. +0.j ,
        -0.5-0.5j,  0.5+0.j ,  0. +0.j ,  0. -0.5j, -0.5-0.j ,  0. +0.j ,
         0.5-0.5j,  0.5+0.j , -0.5-0.5j, -0. +0.5j, -0.5-0.5j,  0. +0.j ,
         0. -0.j , -0. +0.5j, -0. +0.j ,  0.5+0.5j,  0. +0.j ,  0.5+0.j ],
       [ 0. +0.j , -0. +0.j ,  0. -0.5j,  0.5+0.j ,  0. -0.j , -0.5+0.5j,
        -0. +0.j ,  0. +0.j ,  0. -0.5j,  0. +0.j ,  0. -0.j ,  0. +0.5j,
         0.5-0.5j, -0.5+0.5j,  0. -0.5j,  0.5-0.5j, -0. +0.5j, -0. +0.j ,
         0.5+0.j ,  0.5-0.5j,  0.5+0.5j, -0.5+0.j ,  0. +0.j ,  0.5-0.5j,
        -0.5+0.j ,  0.5+0.5j,  0.5+0.5j, -0. +0.5j,  0. +0.j ,  0. +0.j ,
        -0.5-0.5j,  0. -0.5j,  0.5-0.5j,  0. +0.5j,  0. +0.5j,  0.5-0.5j,
         0.5-0.5j,  0.5+0.j , -0.5-0.5j, -0. +0.5j,  0. +0.j ,  0. -0.j ,
         0. -0.j ,  0. -0.5j, -0.5-0.5j, -0. +0.j , -0. +0.j ,  0.5+0.j ],
       [-0. +0.j ,  0.5-0.5j,  0. +0.j , -0.5-0.j , -0. +0.j ,  0.5+0.5j,
         0. -0.5j,  0. +0.j ,  0.5+0.j ,  0.5-0.5j,  0. +0.j ,  0.5+0.j ,
        -0. +0.j , -0. +0.j , -0. +0.5j, -0.5-0.5j,  0. -0.5j,  0. +0.j ,
         0. -0.5j,  0.5+0.5j,  0. -0.j ,  0. -0.5j, -0.5-0.5j,  0.5+0.5j,
         0. +0.5j, -0.5+0.5j,  0. +0.j , -0.5-0.j ,  0. +0.j ,  0.5-0.5j,
         0. +0.j ,  0.5+0.j , -0.5-0.5j,  0. +0.5j,  0.5+0.j ,  0.5+0.5j,
        -0. +0.j ,  0.5+0.j ,  0. -0.j ,  0. +0.5j,  0. +0.j ,  0.5+0.5j,
         0.5+0.5j,  0. -0.5j, -0.5+0.5j,  0. +0.j ,  0.5+0.5j, -0.5+0.j ],
       [ 0.5-0.5j,  0.5-0.5j, -0. +0.j , -0.5-0.j ,  0.5-0.5j, -0. +0.j ,
        -0.5+0.j , -0.5+0.5j,  0.5+0.j , -0.5-0.5j,  0.5+0.5j,  0. -0.5j,
         0. +0.j , -0. +0.j ,  0.5+0.j ,  0. +0.j ,  0. -0.5j, -0.5+0.5j,
        -0.5+0.j , -0. +0.j ,  0. -0.j , -0.5-0.j , -0.5+0.5j,  0. -0.j ,
        -0. +0.5j,  0. +0.j ,  0. +0.j , -0.5+0.j , -0.5-0.5j,  0.5-0.5j,
         0. +0.j ,  0. -0.5j,  0. +0.j ,  0. +0.5j,  0.5+0.j , -0. +0.j ,
         0. +0.j ,  0. -0.5j, -0. +0.j , -0. +0.5j, -0.5+0.5j,  0.5+0.5j,
         0.5-0.5j, -0.5+0.j ,  0. +0.j , -0.5-0.5j,  0.5+0.5j,  0. +0.5j],
       [ 0.5-0.5j, -0. +0.j ,  0. -0.5j,  0. -0.5j, -0.5+0.5j,  0. -0.j ,
         0. -0.j ,  0.5-0.5j,  0.5+0.j ,  0. -0.j , -0.5-0.5j,  0. -0.5j,
         0.5-0.5j,  0.5+0.5j,  0. -0.5j,  0. +0.j ,  0.5+0.j , -0.5+0.5j,
        -0.5+0.j ,  0. +0.j ,  0.5-0.5j,  0.5+0.j , -0. +0.j , -0. +0.j ,
         0. -0.5j,  0. +0.j ,  0.5-0.5j, -0.5+0.j , -0.5-0.5j, -0. +0.j ,
        -0.5+0.5j, -0. +0.5j,  0. -0.j ,  0.5+0.j , -0.5+0.j ,  0. +0.j ,
         0.5-0.5j,  0.5+0.j , -0.5-0.5j,  0.5+0.j , -0.5+0.5j,  0. +0.j ,
         0. +0.j ,  0. -0.5j, -0. +0.j ,  0.5+0.5j,  0. +0.j ,  0.5+0.j ],
       [ 0. +0.j ,  0. +0.j , -0. +0.5j, -0. +0.5j,  0. +0.j , -0.5-0.5j,
         0. -0.j ,  0. -0.j ,  0. +0.5j,  0. +0.j ,  0. +0.j ,  0.5+0.j ,
        -0.5+0.5j, -0.5-0.5j, -0. +0.5j, -0.5-0.5j,  0.5+0.j ,  0. -0.j ,
        -0. +0.5j,  0.5+0.5j, -0.5+0.5j, -0. +0.5j,  0. +0.j , -0.5+0.5j,
         0.5+0.j ,  0.5+0.5j,  0.5-0.5j,  0. +0.5j, -0. +0.j ,  0. +0.j ,
        -0.5+0.5j,  0.5+0.j , -0.5+0.5j, -0.5+0.j ,  0. +0.5j, -0.5-0.5j,
         0.5-0.5j,  0.5+0.j , -0.5-0.5j,  0.5+0.j ,  0. +0.j ,  0. +0.j ,
         0. -0.j , -0. +0.5j, -0.5-0.5j, -0. +0.j ,  0. +0.j ,  0.5+0.j ],
       [-0. +0.j ,  0.5+0.5j,  0. -0.j , -0. +0.5j,  0. +0.j , -0.5+0.5j,
         0. +0.5j,  0. +0.j , -0.5+0.j ,  0.5-0.5j,  0. +0.j ,  0. -0.5j,
        -0. +0.j ,  0. +0.j , -0. +0.5j, -0.5+0.5j,  0.5+0.j ,  0. +0.j ,
         0.5+0.j , -0.5+0.5j, -0. +0.j , -0.5+0.j ,  0.5+0.5j, -0.5-0.5j,
         0. -0.5j, -0.5+0.5j,  0. -0.j , -0.5-0.j ,  0. +0.j , -0.5-0.5j,
        -0. +0.j , -0. +0.5j,  0.5+0.5j,  0.5+0.j ,  0.5+0.j ,  0.5-0.5j,
         0. -0.j , -0.5-0.j ,  0. +0.j , -0.5-0.j ,  0. -0.j ,  0.5-0.5j,
         0.5+0.5j,  0. -0.5j, -0.5+0.5j,  0. +0.j , -0.5+0.5j,  0.5+0.j ]],
      dtype=np.complex64), np.array([[-0.5-0.j , -0. +0.j ,  0. -0.j ,  0. -0.5j, -0.5-0.j ,  0. +0.j ,
         0. +0.j , -0.5-0.j ,  0.5+0.j , -0. +0.j ,  0. -0.j ,  0. -0.5j,
        -0.5+0.j , -0. +0.5j,  0. +0.j , -0. +0.5j,  0. +0.j ,  0. -0.5j,
         0. -0.j ,  0. -0.5j,  0. +0.j , -0. +0.j ,  0. -0.5j, -0.5-0.j ,
         0. -0.j , -0. +0.j ,  0. +0.j , -0. +0.j ,  0. -0.j ,  0. +0.j ,
        -0.5+0.j ,  0.5+0.j ,  0. +0.j , -0. +0.j ,  0. +0.5j,  0. -0.j ,
         0. -0.j , -0. +0.j , -0. +0.5j,  0. -0.5j,  0. +0.j ,  0.5+0.j ,
        -0. +0.5j,  0.5+0.j ,  0. -0.5j,  0. +0.j , -0.5+0.j ,  0.5+0.j ],
       [ 0. +0.j , -0. +0.5j,  0.5+0.5j,  0. -0.j , -0. +0.j ,  0.5+0.j ,
        -0.5-0.5j,  0. -0.j ,  0. +0.j ,  0. +0.5j, -0. +0.5j,  0. -0.j ,
         0. -0.j ,  0. +0.j , -0.5+0.j ,  0. -0.j ,  0.5+0.j ,  0. -0.j ,
         0. -0.5j,  0. +0.j ,  0. -0.5j, -0.5+0.j ,  0. -0.j , -0. +0.j ,
         0. +0.5j,  0. +0.5j,  0.5+0.j , -0. +0.5j,  0.5+0.j ,  0. +0.5j,
         0. -0.j ,  0. -0.j , -0. +0.5j, -0.5-0.j ,  0. +0.j ,  0. -0.5j,
        -0.5-0.j ,  0. +0.5j,  0. +0.j ,  0. +0.j ,  0. +0.5j,  0. +0.j ,
         0. -0.j ,  0. +0.j ,  0. +0.j ,  0. -0.5j,  0. -0.j , -0. +0.j ],
       [ 0. -0.j ,  0. -0.j ,  0. -0.j ,  0. +0.5j,  0.5+0.j , -0. +0.j ,
         0. +0.j ,  0. -0.j , -0.5+0.j ,  0. +0.5j,  0. +0.j ,  0. -0.j ,
         0.5+0.j ,  0. -0.5j,  0. +0.j , -0. +0.j ,  0.5+0.j , -0. +0.5j,
        -0. +0.j ,  0. +0.5j,  0. +0.j , -0.5+0.j , -0. +0.5j,  0.5+0.j ,
         0. +0.j ,  0. +0.5j,  0.5+0.j , -0. +0.5j,  0. -0.j ,  0. +0.5j,
         0. -0.j , -0.5-0.j ,  0. -0.j ,  0. +0.j ,  0. +0.j ,  0. -0.5j,
        -0.5+0.j , -0. +0.5j, -0. +0.j ,  0. -0.j ,  0. +0.5j,  0. +0.j ,
        -0. +0.j , -0.5-0.j ,  0. -0.j ,  0. -0.5j,  0.5+0.j ,  0. +0.j ],
       [ 0. -0.j , -0. +0.5j,  0. -0.j ,  0. +0.j ,  0.5+0.j ,  0.5+0.j ,
         0. +0.j ,  0.5+0.j , -0.5+0.j ,  0. +0.5j,  0. +0.5j, -0. +0.5j,
         0.5+0.j , -0. +0.j ,  0. +0.j ,  0. -0.5j,  0. -0.j ,  0. -0.j ,
         0. -0.5j,  0. +0.j ,  0. -0.5j,  0. +0.j ,  0. +0.5j,  0.5+0.j ,
         0. +0.j ,  0. +0.5j,  0. -0.j ,  0. +0.5j,  0. -0.j ,  0. -0.j ,
         0.5+0.j ,  0. +0.j ,  0. +0.j , -0.5+0.j ,  0. +0.j ,  0. +0.j ,
        -0.5+0.j ,  0. +0.5j,  0. +0.j ,  0. +0.5j,  0. -0.j , -0.5-0.j ,
         0. +0.j , -0.5-0.j ,  0. -0.j ,  0. -0.5j, -0. +0.j ,  0. +0.j ],
       [-0.5-0.j ,  0. +0.j ,  0. +0.j ,  0. +0.j ,  0.5+0.j ,  0. +0.j ,
         0. -0.j ,  0.5+0.j ,  0.5+0.j ,  0. +0.j ,  0. +0.j ,  0. -0.5j,
        -0.5+0.j ,  0. -0.5j, -0.5+0.j , -0. +0.5j,  0.5+0.j ,  0. -0.5j,
         0. +0.j , -0. +0.5j,  0. +0.j ,  0. +0.j ,  0. -0.5j, -0.5-0.j ,
         0. +0.j , -0. +0.j , -0. +0.j , -0. +0.j ,  0. -0.j ,  0. +0.j ,
        -0.5+0.j , -0.5-0.j , -0. +0.j ,  0.5+0.j ,  0. -0.5j, -0. +0.j ,
        -0. +0.j ,  0. -0.5j,  0. -0.5j,  0. +0.j ,  0. -0.j ,  0.5+0.j ,
         0. -0.5j, -0. +0.j , -0. +0.5j,  0. +0.j ,  0.5+0.j ,  0. -0.j ],
       [ 0. +0.j , -0. +0.5j, -0.5-0.5j,  0. -0.5j,  0. +0.j ,  0.5+0.j ,
         0.5+0.5j,  0. +0.j ,  0. +0.j ,  0. +0.5j,  0. -0.5j, -0. +0.j ,
        -0. +0.j ,  0. -0.j ,  0. +0.j , -0. +0.j ,  0. +0.j , -0. +0.j ,
         0. -0.5j,  0. +0.j ,  0. -0.5j,  0.5+0.j ,  0. +0.j , -0. +0.j ,
         0. -0.5j, -0. +0.5j, -0.5-0.j ,  0. +0.5j,  0.5+0.j ,  0. -0.5j,
         0. -0.j ,  0. -0.j ,  0. -0.5j,  0. +0.j ,  0. +0.j ,  0. +0.5j,
        -0.5+0.j ,  0. +0.j ,  0. +0.j , -0. +0.5j,  0. +0.5j,  0. +0.j ,
         0. +0.j , -0.5-0.j ,  0. -0.j , -0. +0.5j, -0. +0.j ,  0.5+0.j ],
       [-0. +0.j ,  0. +0.j ,  0. +0.j ,  0. -0.5j, -0.5+0.j , -0. +0.j ,
         0. -0.j ,  0. +0.j , -0.5+0.j , -0. +0.5j,  0. +0.j ,  0. -0.j ,
         0.5+0.j , -0. +0.5j,  0. -0.j , -0. +0.j , -0.5-0.j , -0. +0.5j,
         0. +0.j ,  0. -0.5j,  0. +0.j ,  0.5+0.j ,  0. +0.5j,  0.5+0.j ,
         0. +0.j ,  0. +0.5j, -0.5-0.j , -0. +0.5j,  0. -0.j ,  0. -0.5j,
        -0. +0.j ,  0.5+0.j ,  0. +0.j ,  0. +0.j ,  0. -0.j ,  0. +0.5j,
        -0.5+0.j , -0. +0.5j,  0. +0.j ,  0. +0.j ,  0. +0.5j,  0. +0.j ,
         0. -0.j , -0.5-0.j , -0. +0.j ,  0. +0.5j, -0.5+0.j , -0. +0.j ],
       [ 0. -0.j ,  0. +0.5j,  0. +0.j , -0. +0.j , -0.5+0.j ,  0.5+0.j ,
         0. -0.j , -0.5-0.j , -0.5+0.j ,  0. +0.5j,  0. -0.5j, -0. +0.5j,
         0.5+0.j ,  0. -0.j , -0. +0.j ,  0. -0.5j,  0. +0.j ,  0. -0.j ,
         0. -0.5j, -0. +0.j ,  0. -0.5j,  0. -0.j ,  0. +0.5j,  0.5+0.j ,
         0. +0.j , -0. +0.5j,  0. +0.j ,  0. +0.5j,  0. -0.j , -0. +0.j ,
         0.5+0.j ,  0. -0.j , -0. +0.j , -0.5+0.j ,  0. +0.j ,  0. -0.j ,
        -0.5+0.j ,  0. +0.5j,  0. +0.j ,  0. +0.5j,  0. -0.j , -0.5+0.j ,
         0. -0.j , -0.5-0.j ,  0. +0.j ,  0. +0.5j,  0. +0.j , -0. +0.j ],
       [ 0.5+0.j ,  0. +0.j ,  0. -0.j , -0. +0.j ,  0.5+0.j ,  0. +0.j ,
         0. -0.j , -0.5-0.j , -0. +0.j ,  0. -0.j ,  0. -0.j , -0. +0.j ,
         0.5+0.j , -0. +0.5j,  0.5+0.j ,  0. -0.5j,  0.5+0.j ,  0. -0.5j,
         0. -0.5j,  0. +0.5j, -0. +0.j , -0.5-0.j ,  0. -0.5j, -0.5+0.j ,
         0. -0.5j,  0. +0.j ,  0. -0.j ,  0. -0.5j,  0. -0.j , -0. +0.j ,
        -0.5+0.j , -0. +0.j , -0. +0.j , -0.5-0.j ,  0. +0.j ,  0. +0.j ,
        -0. +0.j ,  0. -0.5j,  0. -0.5j,  0. +0.j ,  0. -0.j , -0.5-0.j ,
        -0. +0.5j,  0. +0.j ,  0. -0.5j,  0. +0.j ,  0.5+0.j ,  0. -0.j ],
       [ 0. -0.j , -0. +0.5j,  0.5+0.5j,  0. +0.5j,  0. +0.j ,  0.5+0.j ,
         0.5+0.5j, -0. +0.j ,  0.5+0.j ,  0. -0.5j,  0. -0.5j, -0. +0.5j,
         0. +0.j ,  0. +0.j , -0. +0.j ,  0. -0.j ,  0. +0.j , -0. +0.j ,
         0. +0.j ,  0. +0.j , -0. +0.5j,  0. +0.j ,  0. +0.j , -0. +0.j ,
         0. +0.j ,  0. -0.5j, -0.5+0.j ,  0. +0.j ,  0.5+0.j ,  0. +0.5j,
        -0. +0.j , -0.5-0.j ,  0. -0.5j,  0. -0.j , -0. +0.5j,  0. -0.5j,
        -0.5-0.j ,  0. -0.j ,  0. +0.j ,  0. +0.5j,  0. -0.5j,  0. -0.j ,
         0. +0.j ,  0.5+0.j , -0. +0.j ,  0. -0.5j,  0. +0.j ,  0.5+0.j ],
       [ 0. +0.j ,  0. +0.j ,  0. -0.j , -0. +0.5j, -0.5+0.j , -0. +0.j ,
         0. -0.j ,  0. -0.j ,  0. -0.j ,  0. -0.5j, -0. +0.j ,  0. +0.5j,
        -0.5-0.j ,  0. -0.5j,  0. +0.j ,  0. +0.j , -0.5+0.j , -0. +0.5j,
         0. +0.5j,  0. -0.5j,  0. -0.j ,  0. -0.j ,  0. +0.5j,  0.5+0.j ,
        -0. +0.5j,  0. -0.5j, -0.5-0.j ,  0. -0.j , -0. +0.j ,  0. +0.5j,
        -0. +0.j ,  0. +0.j , -0. +0.j ,  0. -0.j , -0. +0.5j,  0. -0.5j,
        -0.5-0.j , -0. +0.5j,  0. +0.j ,  0. -0.j ,  0. -0.5j, -0. +0.j ,
        -0. +0.j ,  0.5+0.j ,  0. -0.j ,  0. -0.5j, -0.5-0.j , -0. +0.j ],
       [ 0. +0.j , -0. +0.5j,  0. -0.j ,  0. +0.j , -0.5-0.j ,  0.5+0.j ,
         0. -0.j ,  0.5+0.j ,  0. -0.j ,  0. -0.5j,  0. -0.5j,  0. +0.j ,
        -0.5+0.j ,  0. +0.j ,  0. +0.j , -0. +0.5j,  0. +0.j ,  0. -0.j ,
         0. -0.j ,  0. +0.j , -0. +0.5j,  0.5+0.j , -0. +0.5j,  0.5+0.j ,
         0. +0.5j,  0. -0.5j,  0. +0.j ,  0. +0.j ,  0. -0.j ,  0. +0.j ,
         0.5+0.j , -0.5-0.j , -0. +0.j ,  0.5+0.j ,  0. +0.5j,  0. +0.j ,
        -0.5-0.j , -0. +0.5j,  0. +0.j ,  0. +0.5j,  0. +0.j ,  0.5+0.j ,
        -0. +0.j ,  0.5+0.j ,  0. +0.j ,  0. -0.5j,  0. +0.j ,  0. -0.j ],
       [ 0. -0.5j,  0. +0.j , -0. +0.j ,  0.5+0.j , -0. +0.5j,  0. -0.j ,
        -0. +0.j , -0. +0.5j, -0. +0.j ,  0. +0.j , -0. +0.j , -0. +0.j ,
         0. +0.5j, -0.5-0.j ,  0. +0.j ,  0.5+0.j ,  0. +0.j ,  0.5+0.j ,
         0.5+0.j ,  0.5+0.j ,  0. +0.j ,  0. +0.5j,  0.5+0.j ,  0. +0.5j,
         0.5+0.j , -0. +0.j ,  0. +0.j , -0.5+0.j , -0. +0.j , -0. +0.j ,
        -0. +0.5j, -0. +0.j , -0. +0.j ,  0. -0.j ,  0. -0.j , -0. +0.j ,
         0. +0.j ,  0. -0.j , -0.5-0.j , -0.5-0.j ,  0. +0.j , -0. +0.5j,
         0.5+0.j ,  0. -0.5j,  0.5+0.j ,  0. +0.j , -0. +0.5j,  0. +0.5j],
       [ 0. +0.j ,  0.5+0.j ,  0.5-0.5j,  0. +0.j ,  0. +0.j , -0. +0.5j,
         0.5-0.5j, -0. +0.j ,  0. -0.5j,  0.5+0.j , -0.5+0.j , -0.5+0.j ,
        -0. +0.j , -0. +0.j , -0. +0.5j,  0. -0.j ,  0. -0.5j,  0. +0.j ,
         0. -0.j ,  0. -0.j ,  0.5+0.j ,  0. -0.j ,  0. +0.j ,  0. +0.j ,
         0. +0.j , -0.5+0.j ,  0. -0.5j,  0. +0.j ,  0. -0.5j, -0.5-0.j ,
         0. +0.j ,  0. +0.5j,  0.5+0.j ,  0. -0.5j, -0.5-0.j , -0.5+0.j ,
         0. -0.5j, -0.5+0.j ,  0. +0.j ,  0. -0.j ,  0.5+0.j ,  0. +0.j ,
         0. -0.j ,  0. -0.j , -0. +0.j ,  0.5+0.j ,  0. +0.j ,  0. -0.j ],
       [ 0. -0.j ,  0. -0.j , -0. +0.j , -0.5-0.j ,  0. -0.5j,  0. +0.j ,
        -0. +0.j , -0. +0.j ,  0. +0.j ,  0.5+0.j ,  0. +0.j , -0.5-0.j ,
         0. -0.5j,  0.5+0.j ,  0. +0.j ,  0. +0.j ,  0. -0.5j, -0.5+0.j ,
        -0.5-0.j , -0.5-0.j ,  0. -0.j , -0. +0.j , -0.5-0.j ,  0. -0.5j,
        -0.5-0.j , -0.5-0.j ,  0. -0.5j,  0. -0.j , -0. +0.j , -0.5+0.j ,
         0. +0.j ,  0. +0.j , -0. +0.j ,  0. +0.j , -0.5+0.j , -0.5+0.j ,
         0. -0.5j, -0.5-0.j ,  0. -0.j , -0. +0.j ,  0.5+0.j , -0. +0.j ,
         0. +0.j , -0. +0.5j,  0. +0.j ,  0.5+0.j ,  0. -0.5j, -0. +0.j ],
       [ 0. +0.j ,  0.5+0.j , -0. +0.j ,  0. +0.j ,  0. -0.5j, -0. +0.5j,
        -0. +0.j ,  0. -0.5j, -0. +0.j ,  0.5+0.j , -0.5+0.j ,  0. +0.j ,
         0. -0.5j, -0. +0.j ,  0. +0.j , -0.5-0.j ,  0. +0.j ,  0. +0.j ,
         0. +0.j ,  0. +0.j ,  0.5+0.j ,  0. -0.5j, -0.5+0.j ,  0. -0.5j,
        -0.5+0.j , -0.5+0.j ,  0. +0.j , -0. +0.j , -0. +0.j ,  0. +0.j ,
         0. -0.5j,  0. +0.5j,  0. -0.j ,  0. -0.5j, -0.5-0.j ,  0. +0.j ,
         0. -0.5j, -0.5-0.j , -0. +0.j ,  0.5+0.j , -0. +0.j ,  0. -0.5j,
         0. +0.j ,  0. +0.5j,  0. +0.j ,  0.5+0.j ,  0. +0.j ,  0. +0.j ]],
      dtype=np.complex64), np.array([[-0. +0.5j,  0. -0.5j,  0. +0.j ,  0. -0.j , -0. +0.j , -0.5+0.j ,
         0. +0.j , -0. +0.j ,  0.5+0.j , -0. +0.5j,  0. +0.j , -0.5+0.5j,
        -0. +0.j , -0. +0.j ,  0.5+0.j ,  0. -0.5j, -0.5-0.5j,  0. +0.5j,
        -0.5-0.5j,  0. +0.j ,  0. +0.j ,  0. +0.j ,  0. -0.j ,  0. +0.j ,
         0. -0.5j,  0. +0.j , -0. +0.5j, -0. +0.5j,  0.5+0.j ,  0. +0.j ,
        -0. +0.5j,  0. +0.j ,  0. -0.5j,  0. -0.j ,  0.5+0.j ,  0. -0.j ,
         0.5+0.j ,  0. -0.5j, -0.5-0.j ,  0.5-0.5j,  0. -0.5j,  0. +0.j ,
        -0.5-0.j , -0.5-0.j , -0.5+0.j ,  0. +0.j ,  0. -0.5j,  0.5+0.j ],
       [-0.5+0.j , -0.5-0.j , -0. +0.j ,  0. +0.j ,  0. +0.j , -0.5-0.j ,
         0. +0.j ,  0. +0.j ,  0. -0.5j,  0. -0.5j,  0. +0.j ,  0.5-0.5j,
         0. +0.j , -0. +0.j ,  0. -0.5j, -0. +0.5j, -0.5+0.5j, -0. +0.5j,
        -0.5-0.5j,  0. +0.j ,  0. +0.j , -0. +0.j , -0. +0.j ,  0. -0.j ,
        -0.5+0.j , -0. +0.j ,  0.5+0.j , -0.5-0.j ,  0. -0.5j,  0. +0.j ,
         0.5+0.j ,  0. +0.j , -0.5+0.j ,  0. +0.j ,  0. +0.5j,  0. +0.j ,
         0.5+0.j , -0.5-0.j , -0.5-0.j , -0.5-0.5j,  0. +0.5j, -0. +0.j ,
         0.5+0.j ,  0. +0.5j,  0. -0.5j,  0. -0.j , -0.5-0.j ,  0. -0.5j],
       [ 0. -0.5j,  0. +0.5j,  0. +0.j ,  0. -0.j ,  0. +0.j ,  0. +0.5j,
        -0. +0.j ,  0. +0.j ,  0. -0.5j,  0.5+0.j , -0. +0.j ,  0.5+0.5j,
        -0. +0.j ,  0. +0.j , -0. +0.5j, -0.5-0.j , -0.5-0.5j,  0.5+0.j ,
        -0.5+0.5j,  0. +0.j ,  0. -0.j ,  0. +0.j , -0. +0.j , -0. +0.j ,
        -0.5-0.j ,  0. -0.j , -0. +0.5j,  0.5+0.j , -0.5+0.j ,  0. +0.j ,
         0. -0.5j, -0. +0.j ,  0. -0.5j,  0. +0.j ,  0. -0.5j,  0. +0.j ,
         0. -0.5j, -0.5+0.j ,  0. -0.5j, -0.5+0.5j, -0.5-0.j ,  0. -0.j ,
         0. -0.5j, -0. +0.5j, -0.5-0.j ,  0. +0.j ,  0. -0.5j,  0. +0.5j],
       [ 0. -0.5j,  0. -0.5j, -0. +0.j ,  0. -0.j ,  0. +0.j ,  0.5+0.j ,
         0. +0.j ,  0. +0.j ,  0. +0.5j, -0. +0.5j,  0. +0.j , -0.5+0.5j,
         0. -0.j , -0. +0.j ,  0. -0.5j,  0. -0.5j,  0.5+0.5j,  0. -0.5j,
         0.5+0.5j,  0. -0.j ,  0. -0.j , -0. +0.j ,  0. +0.j ,  0. +0.j ,
         0.5+0.j , -0. +0.j ,  0. -0.5j,  0.5+0.j ,  0.5+0.j ,  0. -0.j ,
         0. +0.5j,  0. +0.j ,  0. +0.5j,  0. +0.j ,  0. -0.5j, -0. +0.j ,
        -0.5+0.j ,  0.5+0.j , -0.5-0.j ,  0.5-0.5j,  0. -0.5j,  0. +0.j ,
         0.5+0.j ,  0. -0.5j, -0.5-0.j ,  0. +0.j , -0. +0.5j,  0. -0.5j],
       [ 0. -0.5j,  0. -0.j ,  0.5+0.j , -0.5-0.5j,  0. -0.j ,  0.5+0.j ,
         0.5+0.j ,  0. +0.j , -0.5-0.j , -0. +0.j , -0. +0.j ,  0.5-0.5j,
        -0.5+0.j , -0. +0.5j,  0. +0.5j, -0. +0.5j,  0. -0.j ,  0. -0.5j,
         0.5+0.5j, -0. +0.j ,  0.5+0.j , -0. +0.j , -0.5+0.j ,  0. -0.j ,
         0. +0.5j, -0. +0.j , -0. +0.j ,  0. -0.5j, -0.5-0.j ,  0. -0.5j,
        -0. +0.j ,  0. -0.j ,  0. +0.5j, -0.5-0.5j, -0.5+0.j ,  0. +0.j ,
         0. +0.j , -0.5-0.j ,  0. -0.j ,  0. +0.j ,  0. +0.5j, -0. +0.5j,
        -0. +0.j ,  0. -0.5j,  0.5+0.j ,  0. +0.j ,  0. -0.j ,  0. -0.5j],
       [ 0.5+0.j ,  0. -0.j , -0.5-0.j ,  0.5-0.5j,  0. -0.j ,  0.5+0.j ,
         0.5+0.j ,  0. -0.j , -0. +0.5j,  0. +0.j ,  0. -0.j , -0.5+0.5j,
         0.5+0.j , -0.5+0.j , -0.5-0.j ,  0. -0.5j, -0. +0.j ,  0. -0.5j,
         0.5+0.5j,  0. +0.j ,  0. +0.5j,  0. +0.j , -0.5+0.j ,  0. +0.j ,
         0.5+0.j ,  0. +0.j ,  0. +0.j ,  0.5+0.j , -0. +0.5j,  0.5+0.j ,
         0. +0.j ,  0. -0.j ,  0.5+0.j ,  0.5-0.5j,  0. -0.5j,  0. +0.j ,
         0. +0.j ,  0. -0.5j,  0. -0.j ,  0. -0.j ,  0. -0.5j, -0.5-0.j ,
         0. +0.j ,  0.5+0.j ,  0. +0.5j,  0. +0.j ,  0. -0.j ,  0.5+0.j ],
       [ 0. +0.5j,  0. +0.j ,  0. +0.5j, -0.5-0.5j,  0. +0.j ,  0. -0.5j,
        -0. +0.5j,  0. +0.j ,  0. +0.5j,  0. +0.j ,  0. +0.j , -0.5-0.5j,
         0. +0.5j, -0. +0.5j, -0.5+0.j ,  0.5+0.j ,  0. -0.j , -0.5-0.j ,
         0.5-0.5j, -0. +0.j , -0.5+0.j ,  0. -0.j , -0. +0.5j,  0. +0.j ,
         0.5+0.j ,  0. +0.j ,  0. +0.j , -0.5+0.j ,  0.5+0.j ,  0. -0.5j,
         0. +0.j ,  0. +0.j , -0. +0.5j,  0.5+0.5j, -0. +0.5j,  0. -0.j ,
         0. -0.j , -0. +0.5j,  0. +0.j , -0. +0.j ,  0.5+0.j ,  0. -0.5j,
         0. +0.j , -0.5+0.j ,  0.5+0.j ,  0. -0.j ,  0. -0.j ,  0.5+0.j ],
       [-0. +0.5j,  0. +0.j , -0.5-0.j , -0.5-0.5j, -0. +0.j , -0.5+0.j ,
         0.5+0.j ,  0. -0.j ,  0. -0.5j,  0. +0.j ,  0. -0.j ,  0.5-0.5j,
        -0.5+0.j , -0. +0.5j, -0.5-0.j , -0. +0.5j,  0. +0.j , -0. +0.5j,
        -0.5-0.5j,  0. +0.j , -0.5+0.j ,  0. +0.j ,  0.5+0.j , -0. +0.j ,
        -0.5-0.j ,  0. +0.j ,  0. -0.j , -0.5+0.j , -0.5+0.j ,  0. -0.5j,
        -0. +0.j ,  0. -0.j ,  0. -0.5j,  0.5+0.5j, -0. +0.5j,  0. -0.j ,
         0. -0.j ,  0. +0.5j, -0. +0.j ,  0. +0.j , -0. +0.5j,  0. -0.5j,
         0. +0.j , -0.5-0.j ,  0.5+0.j ,  0. -0.j , -0. +0.j ,  0.5+0.j ],
       [ 0. -0.j ,  0. +0.j , -0.5-0.j ,  0.5+0.j ,  0. +0.j , -0.5-0.j ,
         0. +0.j ,  0. +0.j ,  0. -0.5j,  0. -0.j ,  0. -0.j ,  0. +0.5j,
         0.5+0.j ,  0. -0.5j,  0. -0.5j,  0. -0.5j, -0.5+0.j ,  0. -0.j ,
        -0.5+0.j , -0. +0.5j, -0.5-0.j , -0. +0.5j,  0. +0.j , -0.5+0.j ,
         0. -0.5j, -0.5-0.j , -0. +0.5j,  0.5+0.j , -0. +0.j ,  0. -0.j ,
        -0. +0.5j, -0.5-0.j ,  0. -0.5j,  0.5+0.j ,  0.5+0.j ,  0. +0.5j,
         0.5+0.j ,  0. -0.5j, -0.5-0.j ,  0. -0.5j,  0. +0.j ,  0. +0.j ,
         0. +0.j , -0. +0.5j, -0.5-0.j ,  0. +0.j ,  0. +0.j ,  0.5+0.j ],
       [ 0. +0.j ,  0. +0.j ,  0.5+0.j , -0.5-0.j ,  0. -0.j , -0.5-0.j ,
         0. +0.j ,  0. -0.j , -0.5+0.j ,  0. +0.j ,  0. -0.j ,  0. -0.5j,
        -0.5+0.j ,  0.5+0.j ,  0.5+0.j , -0. +0.5j, -0.5-0.j ,  0. -0.j ,
        -0.5+0.j , -0. +0.5j,  0. -0.5j,  0. -0.5j, -0. +0.j ,  0. +0.5j,
        -0.5-0.j ,  0. -0.5j,  0.5+0.j ,  0. +0.5j,  0. +0.j ,  0. +0.j ,
         0.5+0.j , -0.5-0.j , -0.5-0.j , -0.5-0.j , -0. +0.5j,  0. -0.5j,
         0.5+0.j , -0.5+0.j , -0.5-0.j ,  0. -0.5j,  0. -0.j ,  0. -0.j ,
         0. -0.j , -0.5-0.j ,  0. -0.5j,  0. +0.j ,  0. +0.j ,  0. -0.5j],
       [-0. +0.j ,  0. -0.j ,  0. -0.5j,  0.5+0.j ,  0. -0.j ,  0. +0.5j,
         0. +0.j ,  0. +0.j ,  0.5+0.j ,  0. -0.j ,  0. +0.j , -0. +0.5j,
         0. -0.5j,  0. -0.5j,  0.5+0.j , -0.5-0.j , -0.5+0.j ,  0. -0.j ,
        -0.5-0.j , -0.5+0.j ,  0.5+0.j ,  0. -0.5j,  0. +0.j ,  0.5+0.j ,
        -0.5+0.j ,  0.5+0.j , -0. +0.5j, -0. +0.5j,  0. +0.j ,  0. -0.j ,
         0. -0.5j,  0.5+0.j ,  0. -0.5j, -0.5+0.j ,  0. -0.5j, -0.5+0.j ,
         0. -0.5j, -0.5-0.j ,  0. -0.5j,  0. +0.5j,  0. +0.j ,  0. -0.j ,
         0. +0.j ,  0.5+0.j , -0.5+0.j ,  0. -0.j ,  0. +0.j , -0. +0.5j],
       [-0. +0.j , -0. +0.j ,  0.5+0.j , -0. +0.5j,  0. +0.j ,  0.5+0.j ,
         0. +0.j ,  0. -0.j , -0.5-0.j ,  0. +0.j , -0. +0.j , -0.5-0.j ,
         0.5+0.j ,  0. -0.5j,  0.5+0.j ,  0. -0.5j, -0. +0.5j, -0. +0.j ,
        -0. +0.5j,  0. +0.5j,  0.5+0.j ,  0.5+0.j , -0. +0.j , -0.5-0.j ,
         0.5+0.j ,  0.5+0.j ,  0. -0.5j, -0. +0.5j,  0. -0.j ,  0. +0.j ,
        -0. +0.5j,  0. -0.5j,  0. +0.5j,  0. -0.5j,  0. -0.5j,  0. -0.5j,
        -0.5-0.j ,  0.5+0.j , -0.5-0.j ,  0.5+0.j , -0. +0.j ,  0. +0.j ,
         0. -0.j ,  0.5+0.j , -0.5+0.j ,  0. -0.j ,  0. +0.j ,  0. -0.5j],
       [-0. +0.5j,  0. -0.5j,  0. +0.j , -0. +0.5j,  0. -0.5j,  0. +0.j ,
        -0.5-0.j ,  0.5+0.j ,  0.5+0.j , -0. +0.5j, -0.5+0.j , -0.5-0.j ,
         0. +0.j , -0. +0.j ,  0.5+0.j , -0. +0.j ,  0. -0.5j,  0. +0.5j,
         0. -0.5j,  0. +0.j ,  0. +0.j , -0.5+0.j ,  0.5+0.j , -0. +0.j ,
         0.5+0.j , -0. +0.j ,  0. +0.j ,  0. +0.5j,  0.5+0.j ,  0. +0.5j,
         0. +0.j ,  0. -0.5j, -0. +0.j , -0. +0.5j, -0. +0.5j,  0. +0.j ,
         0. +0.j ,  0.5+0.j ,  0. +0.j ,  0.5+0.j ,  0. -0.5j,  0. -0.5j,
        -0.5-0.j , -0.5+0.j ,  0. +0.j ,  0. -0.5j,  0. -0.5j,  0. +0.5j],
       [-0.5+0.j , -0.5+0.j , -0. +0.j ,  0. +0.5j, -0.5-0.j ,  0. +0.j ,
        -0.5+0.j , -0.5-0.j ,  0. -0.5j,  0. -0.5j, -0.5+0.j ,  0.5+0.j ,
         0. +0.j , -0. +0.j ,  0. -0.5j,  0. +0.j ,  0. +0.5j,  0. +0.5j,
         0. -0.5j,  0. +0.j ,  0. +0.j ,  0.5+0.j ,  0.5+0.j ,  0. +0.j ,
         0. -0.5j,  0. -0.j ,  0. -0.j , -0.5+0.j ,  0. -0.5j, -0.5-0.j ,
        -0. +0.j ,  0. -0.5j,  0. +0.j ,  0. +0.5j, -0.5-0.j ,  0. +0.j ,
         0. +0.j , -0. +0.5j,  0. +0.j , -0.5+0.j ,  0. +0.5j,  0.5+0.j ,
         0.5+0.j , -0. +0.5j, -0. +0.j ,  0.5+0.j , -0.5-0.j , -0.5-0.j ],
       [ 0. -0.5j,  0. +0.5j, -0. +0.j , -0. +0.5j,  0. -0.5j,  0. -0.j ,
         0. -0.5j, -0. +0.5j,  0. -0.5j,  0.5+0.j ,  0. -0.5j,  0.5+0.j ,
        -0. +0.j , -0. +0.j , -0. +0.5j,  0. +0.j ,  0. -0.5j,  0.5+0.j ,
         0. +0.5j,  0. -0.j , -0. +0.j , -0.5-0.j ,  0. -0.5j,  0. +0.j ,
         0. +0.5j,  0. +0.j ,  0. +0.j ,  0.5+0.j , -0.5-0.j ,  0. +0.5j,
        -0. +0.j ,  0. -0.5j,  0. +0.j ,  0. -0.5j, -0.5+0.j , -0. +0.j ,
         0. -0.j ,  0. -0.5j, -0. +0.j , -0.5-0.j , -0.5-0.j ,  0. +0.5j,
         0. -0.5j,  0. +0.5j,  0. +0.j ,  0. -0.5j,  0. -0.5j, -0.5-0.j ],
       [ 0. -0.5j,  0. -0.5j,  0. -0.j ,  0.5+0.j ,  0. +0.5j, -0. +0.j ,
        -0.5-0.j , -0.5-0.j , -0. +0.5j,  0. +0.5j, -0.5-0.j ,  0. +0.5j,
         0. +0.j ,  0. +0.j ,  0. -0.5j,  0. +0.j ,  0.5+0.j ,  0. -0.5j,
         0.5+0.j , -0. +0.j , -0. +0.j ,  0. -0.5j, -0.5+0.j ,  0. -0.j ,
         0. -0.5j,  0. +0.j ,  0. +0.j ,  0.5+0.j ,  0.5+0.j , -0. +0.5j,
         0. -0.j , -0.5-0.j ,  0. -0.j , -0.5+0.j , -0.5+0.j ,  0. +0.j ,
         0. -0.j ,  0. -0.5j,  0. -0.j ,  0. -0.5j,  0. -0.5j, -0. +0.5j,
         0.5+0.j ,  0. -0.5j,  0. +0.j ,  0. -0.5j, -0. +0.5j, -0.5-0.j ]],
      dtype=np.complex64))

decomposition_555 = (np.array([[ 0.,  0.,  0., -1., -0., -0.,  0.,  0., -0., -0., -0.,  1.,  0.,
         0.,  0.,  0., -0., -0.,  1.,  0., -0., -1., -0.,  0.,  0., -0.,
         0.,  0.,  0., -1., -1.,  1., -1.,  0., -0., -0.,  0., -0., -0.,
        -0.,  0., -0.,  0., -0.,  0., -0.,  0., -0.,  0., -0.,  0., -0.,
        -1., -0., -0.,  0.,  0., -0.,  0., -0., -0.,  0., -0., -0.,  1.,
        -0., -0.,  0.,  0., -0.,  0.,  0., -1.,  0., -0., -0.,  0., -0.,
        -0., -1.,  0., -0., -0.,  0.,  0., -0.,  0.,  0.,  0., -0.,  0.,
         0., -1.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -0.,  0., -0., -0.,  0.,
         0., -0.,  0.,  0.,  0., -1., -0., -1.,  1., -0., -0., -1., -1.,
        -1.,  0.,  1.,  1.,  1., -1.,  1., -0.,  0.,  0., -0., -0., -0.,
        -0.,  0., -0.,  0.,  0.,  0.,  0.,  1., -0.,  0., -1.,  1., -0.,
         1.,  0., -0.,  0., -0.,  1.,  0., -0., -0.,  0., -0., -0., -1.,
         1.,  0.,  0.,  0.,  1.,  0.,  0.,  1., -0.,  1., -0., -0.,  1.,
        -1.,  0., -1.,  0.,  0., -0., -0.,  0., -0., -0., -1., -0., -1.,
         0.,  0.],
       [-0.,  0., -0.,  0.,  1.,  0.,  0., -0.,  0.,  1., -1., -0.,  0.,
         1.,  0., -1.,  0., -0.,  0., -0., -0.,  0., -0., -0., -0., -1.,
        -0., -0.,  0., -0., -0., -1.,  1., -1.,  0., -1., -0., -1.,  0.,
        -0., -1., -0., -0.,  0.,  0.,  0.,  0., -0.,  0., -0., -0.,  0.,
         1.,  0., -0.,  0., -1., -0.,  0.,  0., -0.,  0., -0., -1.,  0.,
        -0., -0., -0., -0.,  0.,  0.,  0.,  1.,  0.,  0., -0., -0.,  0.,
        -0.,  0.,  0., -0.,  1., -0.,  0.,  0., -0., -1., -0., -0.,  0.,
         1.,  0.],
       [-0., -0.,  1., -1.,  0., -0.,  0., -0.,  0.,  0., -0.,  1., -0.,
        -0.,  0.,  0.,  0., -0.,  0., -0.,  0., -0., -0., -0., -0., -1.,
        -1.,  1.,  0.,  0.,  0., -0.,  0., -0.,  0., -0.,  0.,  0., -0.,
         0., -0.,  0.,  0., -0.,  0., -1., -0.,  1., -0., -0.,  1., -0.,
        -0., -0.,  0.,  0.,  0.,  1., -0.,  0., -0.,  0.,  0.,  0., -0.,
         0., -1.,  0., -0.,  0.,  0.,  0.,  0.,  0.,  0., -0.,  0.,  0.,
        -0., -1.,  0.,  0.,  0.,  1.,  1., -0.,  0.,  0., -0., -0., -1.,
        -0., -1.],
       [ 0.,  0.,  0., -0., -1., -0.,  0., -0.,  0., -1.,  0., -0.,  0.,
        -1.,  0.,  1.,  0.,  0.,  0.,  0., -0.,  1., -0., -0.,  0.,  0.,
        -0., -0., -0.,  1.,  1., -0.,  0.,  1., -0.,  1., -0.,  1.,  0.,
        -0.,  1., -0., -0.,  0., -0.,  0.,  0., -0.,  0., -1.,  1., -0.,
         0.,  0., -0., -0.,  1.,  1.,  0.,  0.,  0.,  0., -0.,  1.,  0.,
        -0.,  0., -0., -0.,  0.,  1., -0.,  0., -0., -0.,  0.,  0.,  0.,
         0., -0., -0.,  0.,  0., -0., -0.,  0.,  0.,  1., -0., -0.,  0.,
        -1., -0.],
       [ 0.,  0.,  0., -0.,  0., -0.,  0.,  0.,  0.,  0., -0., -0.,  0.,
        -0.,  1., -0.,  0.,  0., -0., -0., -0.,  0., -0., -1., -0.,  0.,
        -0.,  0., -0., -0.,  0., -0., -0., -0.,  0.,  0.,  0., -0.,  0.,
        -0.,  0., -0.,  0.,  0., -0.,  0.,  0., -0.,  0., -0.,  0., -0.,
         0.,  0.,  0.,  0., -0.,  0.,  0., -0.,  1., -0., -0., -0.,  0.,
        -1.,  0., -1., -0., -1.,  0., -0.,  1., -0.,  0.,  1., -0., -0.,
         0.,  1., -0., -1.,  0.,  0., -0.,  0., -0., -0., -0.,  0.,  0.,
         0.,  1.],
       [-0.,  0., -0.,  0., -0.,  1., -0.,  0.,  0.,  0., -0., -1.,  0.,
        -0., -1.,  0.,  0., -0., -0.,  0.,  0.,  0.,  1.,  1.,  1., -0.,
         0.,  0., -1.,  0.,  0.,  0., -0., -0., -1., -0., -0.,  0.,  1.,
        -0.,  0., -0.,  0., -0., -0.,  0.,  0., -0., -1.,  0., -0., -0.,
        -0.,  0.,  1., -0., -0.,  0., -0.,  0., -1.,  0., -0.,  0.,  0.,
         0.,  0.,  0., -0.,  0.,  0.,  0., -1., -0., -0., -0.,  0., -1.,
        -0., -0.,  0., -0., -0., -0., -0.,  0.,  0., -0.,  0., -0.,  0.,
         0., -0.],
       [-0.,  0., -0.,  0., -1.,  0., -0.,  0., -0.,  0.,  0., -1., -0.,
         0., -0., -0., -0.,  0., -0.,  0., -0., -0.,  0.,  1.,  1., -0.,
         0.,  0., -0., -0.,  0., -0.,  0.,  0., -0., -0.,  0.,  1.,  0.,
        -0.,  1., -0., -0., -0.,  0., -0.,  0.,  0., -1.,  0., -0.,  1.,
         0., -0.,  1., -0.,  1.,  0.,  0., -0.,  0.,  0., -0., -0.,  0.,
        -0.,  0.,  0., -0., -0.,  0.,  0., -1.,  0.,  0.,  0.,  0., -1.,
        -0.,  0.,  0., -0., -0.,  0.,  0.,  0.,  0., -0., -0., -1.,  0.,
        -0.,  0.],
       [ 0.,  1., -1., -0., -0., -0., -0., -0.,  1., -0.,  0., -1., -1.,
        -0., -0., -0., -0.,  0., -0., -1., -0.,  0.,  0.,  0., -0.,  0.,
        -0., -1., -0.,  0., -0.,  0.,  0., -0., -1., -0.,  0.,  0.,  1.,
        -0.,  0.,  1.,  0., -0.,  0.,  1., -0., -1.,  0.,  0., -0., -0.,
         0., -0.,  1.,  0., -0.,  0., -0.,  0.,  0., -0.,  1., -0.,  0.,
         0.,  1., -1., -0.,  0., -0., -1., -0., -0.,  0.,  0.,  0.,  0.,
        -1.,  1.,  0., -0., -0., -1., -1., -1., -0., -0., -1.,  0., -0.,
         0.,  1.],
       [-0.,  0.,  0., -0.,  1.,  1.,  0.,  1., -0.,  1., -0., -0.,  0.,
        -0.,  0., -1.,  1.,  0.,  0., -0.,  0., -1.,  0., -0., -0., -0.,
        -0., -0., -1., -0., -1.,  0., -0., -0., -1.,  0., -0., -1.,  0.,
         0., -1., -0.,  0., -0., -0.,  0.,  0., -0., -0.,  0., -1.,  0.,
         0., -0.,  0., -1., -1., -0., -0., -0.,  0.,  0., -0.,  0.,  0.,
         0., -0.,  0.,  0.,  0., -0., -0., -0., -0.,  0.,  0., -0.,  0.,
        -0.,  0., -0.,  0.,  0.,  0., -0., -0., -1.,  0., -0.,  0., -0.,
         0.,  0.],
       [ 0.,  0., -0.,  1., -0., -0., -0., -0.,  0., -0., -0., -1., -0.,
         1.,  0.,  0.,  0., -0., -0., -0.,  0., -0., -0., -0.,  0.,  0.,
        -0.,  0., -0., -0.,  0., -1.,  1., -0.,  0.,  0., -0., -1.,  0.,
        -1., -0., -0., -0.,  0.,  0., -0., -0.,  0., -0.,  0.,  0., -0.,
         1., -0., -0., -0., -0.,  0.,  0., -0.,  0., -0.,  0., -0.,  0.,
         0.,  0.,  0., -0., -0.,  0., -0.,  1., -0., -0.,  0., -1.,  0.,
         0.,  1., -0., -0., -0.,  0.,  0., -0.,  0., -0.,  0.,  0.,  0.,
         0.,  0.],
       [ 0.,  0., -0., -0., -0., -0.,  0.,  0.,  0., -0., -0., -0., -0.,
        -1.,  0.,  0.,  0.,  0.,  0.,  0., -0.,  0., -0., -0.,  1.,  1.,
        -0., -0., -1., -0., -0.,  1., -1., -0., -0.,  0.,  1.,  1.,  0.,
         1., -0.,  0., -1., -0., -0.,  0., -1.,  0.,  0.,  0.,  0., -0.,
        -1., -0., -0.,  0.,  1.,  0., -0., -0.,  0.,  0.,  0.,  1., -0.,
        -1., -0., -0.,  0., -0.,  0.,  0., -1., -0.,  0., -0.,  1.,  0.,
         1.,  0., -0., -0.,  0.,  0., -0., -0.,  0.,  0., -0.,  0.,  0.,
         0.,  0.],
       [ 0., -0., -0., -0.,  0., -0.,  0., -0., -0., -0., -0., -0.,  0.,
        -1., -0.,  0., -0., -0., -0.,  0.,  0.,  0.,  0.,  0., -0.,  1.,
        -0., -0.,  0., -0.,  0.,  1., -1., -0., -0.,  1., -0.,  1.,  0.,
        -0.,  0.,  0.,  0.,  0.,  0.,  0., -0.,  0.,  0., -0., -0., -0.,
        -1., -0.,  0., -0.,  1.,  0.,  0.,  0.,  0., -0.,  0.,  1.,  0.,
         0.,  0., -0.,  1., -0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,
         0., -0.,  0., -0.,  0.,  0., -0., -0., -0., -0.,  0.,  0.,  0.,
         0.,  0.],
       [ 0.,  0.,  0.,  1.,  0.,  0., -0.,  0.,  0., -0.,  0., -1.,  0.,
         0., -0., -0., -0., -0., -0., -0., -0.,  0.,  0., -0., -0.,  1.,
         0., -0., -0.,  0.,  0.,  0., -0.,  0., -0., -0.,  1.,  0., -0.,
         0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -0., -0., -0.,  0., -0.,
        -0., -0., -0., -0.,  1.,  0.,  0.,  0.,  0., -0., -0.,  1., -0.,
         0.,  1., -0.,  0., -0., -0.,  0., -0., -0.,  0.,  0.,  0.,  0.,
        -0.,  1., -0.,  0.,  0., -1., -1.,  0., -0., -0.,  0., -0., -0.,
         0., -0.],
       [-1., -0.,  0., -0., -0.,  0., -0., -0., -0.,  0., -0., -0., -0.,
        -0.,  0., -0., -0.,  0., -1., -0., -0.,  0., -0.,  0.,  0.,  0.,
        -1., -0.,  0.,  0.,  0.,  0.,  0.,  0., -0., -1.,  1.,  0.,  0.,
         1., -0., -0., -1.,  0.,  0.,  0.,  0.,  0.,  0., -0., -0., -0.,
        -0.,  0.,  0.,  0.,  0.,  0., -0.,  0.,  0.,  0.,  0., -0.,  0.,
        -0., -0.,  0., -1., -0., -1., -0., -0., -0., -0.,  0.,  0.,  0.,
        -0., -0., -1.,  0., -1., -0.,  0.,  0.,  0., -0.,  0.,  0., -0.,
         0.,  0.],
       [-0.,  0., -0.,  0., -0.,  0., -0.,  0., -0., -0., -0.,  0.,  0.,
         0.,  0., -0.,  0., -1., -0., -0., -0., -0., -0.,  1.,  0.,  0.,
        -0.,  0.,  0.,  0.,  0.,  0.,  0., -0., -0., -0.,  0.,  0.,  0.,
         0.,  0., -0., -0.,  0.,  0.,  0.,  0.,  1., -0., -0., -0.,  0.,
         0., -1.,  0.,  0., -0., -0., -0.,  0., -0., -0., -0., -0., -0.,
         0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -0.,  0.,  0.,
         0., -1., -0., -0.,  0.,  1., -0.,  1.,  0., -0.,  0., -0., -0.,
         0., -1.],
       [-0.,  0.,  1.,  0.,  0.,  0., -0.,  0., -1., -0., -0.,  1.,  0.,
        -0.,  0.,  0.,  0., -0.,  0.,  0.,  0.,  0., -0., -1.,  0., -0.,
         0., -0.,  0., -0.,  0., -0., -0., -0.,  1., -0.,  0.,  0.,  1.,
        -0., -0., -0.,  0.,  0.,  1., -1.,  0., -0.,  0., -0.,  0., -1.,
         0.,  0., -1.,  0., -0.,  0.,  1., -1., -1.,  1.,  0., -0., -0.,
         0., -0.,  0., -0., -0.,  0.,  1., -1.,  0.,  0.,  0., -0., -0.,
        -0.,  0., -0.,  0.,  0.,  0.,  1.,  0.,  1., -0., -0., -0., -0.,
         0., -0.],
       [ 0.,  0.,  1., -0.,  0.,  0.,  0., -0.,  0.,  0., -0.,  1.,  0.,
         0., -0.,  0., -0.,  0.,  0.,  0., -0.,  0., -0., -1., -0., -0.,
         0., -0.,  0.,  0.,  0.,  0., -0.,  0.,  0., -0.,  0.,  1.,  0.,
         0.,  1.,  0., -0.,  0.,  1., -1., -0., -0., -0., -0.,  0.,  0.,
        -0., -0., -1.,  0.,  1.,  0.,  0., -0.,  0., -0.,  0., -0., -0.,
         0.,  0.,  0.,  0.,  0., -0.,  1., -1.,  0., -0., -0.,  0.,  0.,
         0., -0., -0.,  0.,  0.,  0.,  0., -0.,  0., -0., -0., -0., -0.,
         0.,  0.],
       [ 0., -0.,  1., -0., -0.,  0., -0., -0., -1., -0.,  0.,  1., -0.,
         0., -0.,  0., -0., -1., -0., -0.,  0., -0.,  0., -0., -0.,  0.,
         0., -0.,  0., -0., -0.,  0.,  0.,  0.,  1.,  0.,  0., -0.,  0.,
        -0.,  0.,  0., -0.,  1., -0., -1., -0.,  1., -0.,  0.,  0.,  0.,
        -0.,  0., -1., -0., -0.,  0., -0.,  0., -0.,  0., -1., -0., -0.,
         0.,  0.,  1.,  0.,  0., -0.,  1., -0., -0.,  0.,  0., -0.,  0.,
         0., -1., -0., -0.,  0.,  1.,  1.,  1.,  0., -0.,  0.,  0., -0.,
         0., -1.],
       [-0.,  0.,  0., -0.,  0., -0.,  0.,  1., -1.,  1., -0., -0., -0.,
         0., -0., -0., -0.,  0.,  0., -0., -0., -1.,  0., -0., -0., -0.,
         0., -0.,  0.,  0.,  0.,  0., -0., -0.,  1., -0., -0., -1.,  0.,
        -0., -1., -0., -0., -0.,  0., -0., -0.,  0.,  0.,  0., -1.,  0.,
        -0., -0., -0.,  0., -1., -0.,  1.,  0., -0., -0.,  0.,  0., -0.,
         0., -0., -0., -0., -0.,  0., -0., -0., -0.,  0., -0., -0., -0.,
         0.,  0., -0., -0., -0.,  0.,  1.,  0.,  0., -0.,  0., -0., -0.,
        -0., -0.],
       [-0., -0., -0., -1., -0.,  0., -0.,  0.,  0., -0., -0.,  1., -0.,
         0., -0., -0., -0., -0.,  0.,  0., -0.,  0., -0., -1., -0., -0.,
        -0.,  0., -0., -0., -0.,  1., -1.,  0., -0.,  0.,  0.,  0.,  0.,
         0.,  0., -0., -0., -0.,  0.,  0.,  0., -0.,  0.,  0.,  0.,  0.,
        -1., -0., -0.,  0., -0.,  0., -0., -0., -0., -0., -0.,  0., -0.,
         0.,  0., -1.,  0., -0., -0.,  0., -0., -0., -0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0., -0., -0., -0., -0., -0.,  0., -0., -0.,  0.,
        -0.,  0.],
       [ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -0., -0., -1., -0.,
        -0., -0.,  0., -0.,  0., -0., -0., -0., -0.,  1.,  1., -0., -1.,
        -0., -0., -0., -0., -0., -1.,  1.,  0., -1., -0., -0.,  0.,  0.,
         0., -0.,  0., -0., -0., -0.,  0.,  0., -0., -1.,  0.,  0.,  0.,
         1.,  0.,  1.,  0.,  0., -0., -0., -0., -0.,  0., -0.,  0., -0.,
        -0.,  0.,  0.,  0.,  0., -0., -0., -0.,  1.,  0.,  1.,  0.,  0.,
         0.,  0., -0.,  0., -0.,  0., -0., -0., -0.,  0., -0.,  0., -0.,
         0.,  0.],
       [-0.,  0., -0., -0., -0.,  0.,  0., -0.,  0.,  0.,  0., -1.,  0.,
         1., -0.,  0.,  0.,  0., -0., -0.,  0., -0.,  0.,  1.,  0., -1.,
        -0.,  0., -0., -0.,  0., -1.,  1.,  0., -0., -1., -0., -0., -0.,
        -0.,  0., -0., -0.,  0.,  0., -0.,  0.,  0.,  0., -0.,  0.,  0.,
         1., -0.,  1., -0., -0.,  0., -0., -0., -0., -0.,  0., -1., -0.,
        -0.,  0., -0.,  0., -0.,  0.,  0.,  0., -0.,  0., -0., -0., -0.,
         0.,  0.,  0., -0.,  0.,  0.,  0.,  0., -0.,  0.,  0., -0., -0.,
         1., -0.],
       [-0., -0.,  0., -1., -0.,  0.,  0., -0.,  1.,  0., -0., -0., -0.,
        -0., -0., -0., -0., -0., -0., -0.,  0., -0., -0., -0.,  0., -1.,
         0., -0., -0., -0., -0., -0.,  0.,  0., -1., -0.,  0.,  0., -0.,
        -0.,  0.,  1.,  0.,  0., -0.,  0., -0.,  0.,  0.,  0.,  0., -0.,
        -0.,  0.,  1.,  0., -0., -0.,  0.,  0.,  0., -0.,  1., -0.,  0.,
         0., -0., -1.,  0.,  0., -0., -1., -0.,  0., -0.,  0.,  0., -0.,
        -0.,  0.,  0., -0., -0.,  0., -0., -1., -0., -0., -0., -0.,  0.,
        -0., -0.],
       [ 0.,  0., -0., -0., -0.,  0., -1., -0., -0., -0.,  0.,  0.,  0.,
        -1.,  0.,  0., -0.,  0.,  0., -0.,  0.,  0.,  0., -0.,  0., -0.,
        -0., -0., -0.,  1., -0., -0., -0.,  1., -1.,  1.,  0., -0., -0.,
         0., -0.,  0.,  0., -0.,  0., -0., -0., -0., -0., -1., -0.,  0.,
         0., -0.,  0., -0., -0.,  1.,  0., -0., -0.,  0.,  0.,  1., -0.,
        -0.,  0., -0.,  0., -0.,  0., -0., -0., -0., -0., -0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0., -0.,  0.,  0., -0.,  0., -0.,  0.,
        -1.,  0.]], dtype=np.float32), np.array([[ 0.,  1.,  0.,  0., -0.,  0., -0.,  0.,  0., -0., -0., -0.,  1.,
        -0.,  0.,  0., -0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,
         1., -0.,  0.,  0.,  0., -0.,  0., -0.,  0., -1., -1.,  1., -1.,
         0., -0., -0., -0.,  0., -0.,  0.,  1.,  0., -0.,  1., -1., -0.,
        -1., -1.,  0.,  0.,  1., -1.,  0., -0.,  1., -0., -0., -1., -0.,
        -0.,  0.,  0.,  0., -0.,  0., -0., -1., -1., -0., -0.,  0., -0.,
         1., -0., -1.,  0.,  0., -0., -0., -0.,  0., -0.,  1.,  0., -1.,
         0.,  0.],
       [-0., -0.,  1.,  1.,  0., -0.,  0.,  0., -1., -0.,  0.,  1., -0.,
         0.,  0., -0.,  0.,  0.,  0.,  0., -1., -0.,  0.,  1., -0.,  0.,
         0.,  0., -0.,  0., -0., -0., -0., -0., -0., -0.,  0.,  0., -0.,
        -0., -0.,  0., -0., -0.,  1., -1.,  0.,  1., -0., -0.,  0., -0.,
        -0.,  0., -1.,  0., -0., -0.,  1.,  0.,  0.,  0.,  0.,  0.,  1.,
         0.,  0.,  0.,  0., -1., -0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0., -0.,  0., -0.,  0.,  1., -0.,  0.,  0., -0., -0., -0.,
        -0., -1.],
       [ 0., -0.,  0.,  0., -0.,  0., -0., -0.,  0.,  0., -0.,  0.,  0.,
         1., -0., -0., -0.,  0., -0., -0., -0., -0., -0.,  0.,  0.,  0.,
        -0.,  0., -0.,  1.,  0., -1.,  0.,  0.,  0., -1., -0., -0.,  0.,
        -0., -0., -0., -1., -0.,  0.,  0., -0., -0., -0.,  1.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0., -0.,  0., -0.,  1.,  0., -0.,
         0.,  0., -1., -0., -0.,  0., -0.,  0., -1.,  0.,  1.,  0., -0.,
        -0., -0.,  0.,  0.,  0., -0.,  0.,  1.,  0., -0., -0., -0., -0.,
        -0.,  0.],
       [-0.,  0.,  0., -0.,  0.,  0., -0.,  0.,  0.,  0.,  0.,  0., -0.,
        -0.,  0., -0., -0., -0., -1., -0., -1., -0., -0.,  0., -0., -0.,
         0.,  0., -0.,  0., -0.,  0., -0.,  0.,  0., -0.,  0., -0., -0.,
         1., -0.,  0., -1.,  0., -0., -0., -1., -0.,  0., -0.,  0.,  0.,
        -0.,  1.,  0., -0., -0., -0., -0.,  0., -0.,  0.,  1., -0.,  1.,
         1., -0., -1.,  0., -1.,  0., -0., -0.,  0., -0.,  0.,  0., -0.,
        -0., -0.,  1., -1., -0., -0.,  0.,  1., -0., -0.,  0.,  0.,  0.,
         0.,  0.],
       [-0.,  0., -0., -1.,  0., -0.,  0.,  0.,  1.,  0.,  0., -0.,  0.,
        -0., -0., -0.,  0.,  0., -1., -0.,  0., -0., -0.,  0.,  0., -0.,
        -0., -0., -0., -0., -0., -0., -0.,  0., -0.,  0.,  0., -0.,  0.,
         1.,  0., -0., -1., -0.,  0., -0., -1.,  0., -0.,  0., -0.,  0.,
         0.,  0., -0.,  0., -0.,  0., -1., -0.,  0.,  0.,  1.,  0.,  0.,
         1., -0.,  0.,  0.,  0., -0., -0.,  0.,  0.,  0., -0.,  0., -0.,
        -0., -1.,  1., -0., -0.,  1., -1.,  0.,  0., -0.,  0., -0.,  0.,
        -0.,  0.],
       [ 0.,  1., -0., -0., -0., -0.,  0.,  0., -0., -0.,  0.,  0.,  1.,
         0., -0., -0., -0., -0.,  0.,  0.,  1., -0., -0., -0.,  0.,  0.,
         0.,  0., -0.,  0., -0.,  0., -0.,  0., -0., -0.,  0.,  0., -1.,
        -0., -0., -0.,  0., -0.,  0., -0.,  1.,  0.,  0.,  0., -0., -0.,
        -0., -0.,  0.,  0.,  0., -0.,  0.,  1.,  0.,  1.,  0.,  0.,  0.,
        -0., -0., -0., -0.,  0., -0.,  0., -0., -1., -1., -0.,  0., -0.,
         1., -0., -0.,  0.,  0.,  0., -0.,  0., -0.,  0.,  1.,  0.,  0.,
        -0.,  0.],
       [-0.,  0., -0.,  0., -0.,  1.,  0., -0., -0., -0.,  0., -0.,  0.,
        -0., -0.,  0., -1.,  0., -0., -0., -1.,  0., -0.,  0., -1.,  0.,
         0.,  0., -1.,  0.,  0., -0.,  0.,  0., -0.,  0.,  0., -0.,  0.,
        -0., -0.,  0., -0.,  0.,  0., -0.,  0., -0.,  1.,  0., -0., -1.,
         0., -0., -0.,  0.,  0., -0., -0., -0.,  0., -0.,  0.,  0., -0.,
         0.,  0.,  0., -0.,  0.,  0.,  0., -0.,  0.,  0.,  0., -0., -1.,
         0.,  0.,  0.,  0.,  0., -0.,  0., -0.,  1., -0., -0.,  1., -0.,
         0., -0.],
       [-1., -0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -0.,  0.,  0.,  0.,
        -0., -0., -0.,  0., -0.,  0., -0., -0.,  0., -1., -0., -0., -0.,
         0., -0.,  0., -0.,  0.,  0.,  0., -0., -0.,  0., -0.,  0.,  0.,
         0., -0., -0., -1.,  0., -0.,  0.,  0., -0., -0., -0., -0., -0.,
        -0., -0., -0.,  0., -0., -0., -0.,  0.,  0.,  1.,  0., -0., -0.,
         0.,  0., -0.,  0.,  0., -0., -0.,  0., -1., -1., -0., -0.,  0.,
         0.,  0.,  1., -0., -0., -0., -0., -0.,  0.,  0., -0.,  0., -0.,
        -0., -0.],
       [-1., -0.,  0.,  0.,  0., -0.,  0., -0.,  0., -0., -0., -0., -0.,
         0.,  1., -0.,  0., -0.,  0.,  0., -1., -0., -1.,  0., -0.,  0.,
         0., -0.,  0., -0., -0.,  0.,  0., -0., -0., -0.,  0.,  0.,  0.,
        -0., -0.,  0., -1., -0., -0., -0., -1.,  0., -0., -0.,  0., -0.,
        -0.,  0., -0., -0., -0., -0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,
         1.,  0., -0., -0., -1., -0.,  0.,  0., -0.,  0., -1.,  0.,  0.,
         0., -0.,  1., -1.,  0., -0.,  0., -0.,  0.,  0., -0., -0., -0.,
         0.,  0.],
       [-1.,  0.,  0., -0.,  0., -1., -0., -0., -0.,  0.,  0.,  0., -0.,
         0.,  0.,  0.,  1., -0., -0., -0., -0., -0., -1., -0.,  0., -0.,
        -0.,  0.,  1., -0.,  0.,  0.,  0.,  0., -0.,  0., -0.,  0., -0.,
        -0.,  0.,  0., -1., -0., -0.,  0., -1., -0.,  0.,  0.,  0., -0.,
         0., -0., -0.,  0., -0.,  0., -0., -1.,  0., -0., -0.,  0.,  0.,
        -0., -0.,  0., -0., -0.,  0., -0.,  0.,  0., -0., -0., -0.,  0.,
         0.,  0.,  1.,  0.,  0.,  0., -0., -0., -1., -0., -0., -0., -0.,
         0., -0.],
       [-0.,  0.,  0., -0.,  0., -0., -0., -0., -0.,  1.,  0.,  0.,  0.,
        -0., -0.,  0., -0., -0.,  0.,  0., -0.,  0.,  0.,  0., -0., -0.,
         1., -0., -0.,  0.,  0.,  0.,  0., -0.,  0., -1., -1.,  0.,  0.,
        -0.,  1., -0.,  0., -0., -1., -0., -0., -0., -0.,  1., -1., -1.,
        -0., -0.,  0., -0.,  1., -1.,  0., -1.,  0., -1., -0., -1.,  0.,
         0., -0.,  0., -0.,  0.,  0., -0., -0., -0.,  1., -0., -0., -0.,
        -0.,  0., -1.,  0.,  0., -0., -0.,  0.,  0., -0.,  0., -0., -1.,
         0., -0.],
       [-0., -0., -0.,  1., -0., -1.,  0., -0., -1.,  0., -1.,  1., -0.,
         0., -0., -0.,  1.,  0., -0., -0.,  0., -0.,  0., -0.,  1.,  0.,
         0.,  0.,  1., -0.,  0., -0.,  1., -0.,  0., -0., -0., -0.,  0.,
         0., -0., -0.,  0.,  0.,  1., -1.,  0.,  0., -1.,  0.,  0.,  1.,
        -0.,  0., -1.,  0., -0.,  0.,  1.,  0.,  0., -0.,  0.,  0., -0.,
        -0.,  0.,  0., -0.,  0., -0., -1., -0., -0.,  0., -0.,  0., -0.,
         0.,  0., -0.,  0.,  0.,  0.,  1., -0., -1.,  0.,  0., -1., -0.,
        -0.,  0.],
       [ 1.,  0.,  0.,  0.,  0.,  0.,  0., -0., -0., -0., -0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -0.,  1.,  0., -0., -0.,
         0.,  0., -0.,  0.,  0.,  0.,  0.,  1., -0., -1.,  0., -0., -0.,
         0., -0., -0., -0., -0., -0.,  0.,  0.,  0., -1.,  1.,  0., -0.,
         0.,  0., -1.,  0., -0.,  0.,  0., -0.,  0., -1.,  1.,  0.,  0.,
         0., -0., -0., -0., -0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,
         0., -0., -1., -0.,  0.,  0.,  0., -0., -0.,  0., -0.,  0.,  0.,
        -1.,  0.],
       [ 1., -0.,  0.,  0.,  1.,  0.,  0., -0., -0., -1.,  0., -0., -0.,
        -1.,  0., -1.,  0., -0., -1., -0.,  0., -1.,  1., -0.,  0.,  0.,
        -0., -0., -0., -1., -1., -0.,  0.,  1.,  0.,  0., -0.,  1.,  0.,
         1., -1., -0., -0., -0.,  1., -0., -0.,  0., -1.,  0.,  0.,  1.,
        -0., -0., -1., -0.,  0., -0.,  0.,  1.,  0., -0.,  1.,  0.,  1.,
         0., -0., -0.,  0.,  0., -0., -1.,  0.,  0.,  0., -0.,  1.,  0.,
         0.,  0.,  0., -0., -0.,  0.,  0.,  0., -0.,  0.,  0., -1.,  0.,
        -1., -0.],
       [ 1., -0., -0., -1., -0.,  1.,  0., -0.,  1., -0.,  0., -1., -0.,
        -0., -0.,  0., -1.,  0.,  0., -0., -0.,  0.,  1., -0., -1., -0.,
        -0.,  0., -1.,  0., -0., -0., -1.,  0.,  0.,  0.,  0.,  0., -0.,
         0.,  0., -0., -0., -0., -0.,  1., -0.,  0., -0., -0., -0.,  0.,
        -0., -0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  1., -0., -0.,
         0., -0.,  0., -1., -0., -0., -0., -0.,  0., -0., -0.,  0., -0.,
         0., -0.,  0., -0., -1., -0., -1.,  0.,  1.,  0.,  0., -0., -0.,
         0.,  0.],
       [-0., -1., -0.,  0.,  0., -0.,  0., -0., -0., -0.,  0., -0., -1.,
         0.,  0., -0.,  0.,  0.,  0., -0., -1., -0., -0.,  0., -0., -1.,
        -1.,  0., -0., -0.,  0.,  0.,  0., -0., -0.,  1.,  1.,  0.,  0.,
         0., -0., -0., -0.,  1.,  0.,  0., -1., -0., -0., -1., -0.,  0.,
        -0.,  0.,  0., -0., -0.,  1.,  0., -0.,  0.,  0.,  0.,  1., -0.,
         0.,  0., -0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -0., -0.,  0.,
        -1.,  0.,  1.,  0., -0.,  0., -0., -0.,  0.,  0., -1.,  0.,  1.,
        -0.,  0.],
       [ 0.,  0., -1., -0.,  0., -0.,  0.,  0.,  1., -0., -0., -0.,  0.,
        -0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -0.,  0., -0.,  0.,
         0.,  1., -0.,  0.,  0., -0.,  0.,  0., -0., -0., -0., -0., -0.,
        -0., -0., -0., -0., -0., -1.,  1., -0.,  0., -0., -0., -0., -0.,
        -0., -0.,  0., -0.,  0., -0., -1., -0., -0.,  0., -0.,  0., -0.,
         0., -0.,  0., -0., -0.,  0.,  1., -0.,  0., -0.,  0.,  0., -0.,
         0., -0.,  0.,  0.,  0., -0., -1., -0.,  0.,  0.,  1., -0., -1.,
        -0., -0.],
       [-0., -1., -0.,  0., -0., -0.,  0.,  0.,  0., -0.,  0., -0., -0.,
         0.,  0.,  0., -0.,  0., -0., -0.,  0.,  0., -0., -0.,  0., -1.,
         0.,  0.,  0., -0.,  0., -0., -0., -0., -0.,  1.,  0., -0.,  0.,
        -0., -0.,  1.,  1.,  0.,  0., -0.,  0., -0.,  0., -1., -0.,  0.,
        -0.,  0., -0.,  0.,  0.,  1.,  0., -0., -0., -0., -1.,  1., -0.,
         0., -0.,  0., -0.,  0., -0., -0., -0.,  1., -0., -0., -0., -0.,
        -0., -0.,  0.,  0.,  0., -0.,  0.,  0.,  0.,  0., -0.,  0.,  0.,
        -0.,  0.],
       [-0.,  0.,  0.,  0.,  0., -0., -0.,  0.,  0., -0., -0., -0.,  0.,
        -0.,  0.,  0., -0., -1., -0., -1.,  1., -0.,  0., -0., -0.,  0.,
         1.,  1.,  0., -0.,  0.,  0.,  0., -0.,  0., -0., -1., -0.,  0.,
         0., -0., -0.,  1.,  0., -0.,  0.,  1.,  1., -0., -0., -0., -0.,
        -0., -1.,  0.,  0., -0., -0.,  0., -0., -0.,  0., -1.,  0.,  0.,
         0., -1., -0.,  0.,  0., -0., -0.,  0.,  0., -0., -0.,  0., -0.,
         1.,  0., -1., -0., -0.,  1., -0., -1.,  0.,  0.,  1., -0., -1.,
        -0., -0.],
       [-0.,  0.,  0., -0.,  0., -0., -0.,  0., -1.,  0.,  0.,  0., -0.,
        -0., -0.,  0., -0.,  0.,  0.,  0., -0., -0., -0., -0., -0., -0.,
         1.,  0.,  0., -0.,  0., -0., -0., -0.,  0., -0., -1.,  0.,  0.,
         0.,  0., -0.,  1.,  0., -0.,  0.,  1.,  0., -0., -0.,  0.,  0.,
        -0.,  0.,  0.,  0.,  0., -0.,  1.,  0.,  0.,  0., -1., -0., -0.,
        -0., -1., -0.,  0., -0., -0., -0., -0., -0.,  0.,  0., -0.,  0.,
         1.,  0., -1.,  0.,  0.,  0.,  1., -0.,  0., -0.,  0.,  0., -0.,
         0.,  0.],
       [-0.,  0.,  0., -0.,  0., -0., -0., -1., -0.,  0.,  0.,  0., -0.,
        -0., -0.,  0., -0.,  0., -0.,  0., -0.,  0.,  0.,  0., -0.,  0.,
         1., -0.,  0.,  0., -0., -0.,  0.,  0., -0., -0., -0.,  0., -0.,
         0., -0., -0., -0., -0., -0., -0.,  0., -0., -0.,  1., -1., -0.,
         0., -0., -0., -0.,  0., -1.,  1., -1., -0., -1., -0., -0., -0.,
         0.,  0.,  0., -0., -0.,  0., -0., -0.,  0.,  1., -0., -0.,  0.,
        -0.,  0., -1., -0.,  0., -0.,  0., -0., -1.,  0.,  0.,  0., -1.,
        -0.,  0.],
       [ 0., -0., -0.,  0., -0.,  0.,  1.,  1.,  0.,  1., -1., -0.,  0.,
         0.,  0.,  1.,  1., -0., -0., -0.,  0.,  0.,  0.,  0., -0.,  0.,
         0., -0.,  0.,  0.,  0., -0., -0., -1., -0., -0.,  0.,  0., -0.,
        -0., -0., -0., -0.,  0.,  0., -0., -0., -0.,  0., -0., -0., -0.,
        -0., -0.,  0.,  1.,  0.,  0., -0.,  0., -0.,  0.,  0.,  0., -0.,
        -0.,  0., -0.,  0., -0., -1.,  0.,  0.,  0., -0., -0.,  0., -0.,
        -0., -0.,  0.,  0., -1., -0.,  0., -0.,  0., -1., -0., -0., -0.,
        -0.,  0.],
       [ 1.,  0.,  0., -0., -0.,  1.,  1.,  0.,  1.,  0.,  0.,  0.,  0.,
         0., -0.,  0.,  0., -0., -0., -0., -0., -0.,  1., -0., -0., -0.,
        -0.,  0.,  0., -0., -0., -0., -0.,  0., -1.,  0., -0.,  0., -0.,
        -0.,  0.,  0.,  0., -0.,  0., -0.,  0., -0.,  0.,  1., -0., -0.,
         0., -0., -0., -0., -0.,  0.,  0.,  0.,  0., -1.,  1.,  0., -0.,
         0., -0., -0., -0., -0., -0., -0., -0.,  0.,  1., -0.,  0.,  0.,
        -0.,  0., -1.,  0., -0.,  0.,  0., -0., -0., -0.,  0., -0.,  0.,
         0., -0.],
       [ 1.,  0.,  0., -0.,  0.,  1.,  1.,  1.,  1.,  0., -0., -0.,  0.,
        -0.,  0.,  0., -0., -0., -1.,  0.,  0., -1.,  1., -0.,  0.,  0.,
         0., -0., -0., -1., -1., -0.,  0., -0., -1., -0.,  0.,  0., -0.,
         0.,  0., -0.,  0., -0., -0., -0., -0., -0., -0., -0.,  0.,  0.,
        -0., -0., -0.,  1., -0., -0., -1.,  1., -0.,  0.,  1., -0.,  1.,
        -0., -0.,  0., -0.,  0.,  0.,  0.,  0.,  0.,  0., -0., -0., -0.,
         0., -0., -0.,  0., -0., -0.,  0.,  0.,  1.,  0., -0., -0., -0.,
         0.,  0.],
       [ 1., -0., -0.,  0., -0.,  1.,  0., -0.,  1.,  0., -0., -0., -0.,
         0.,  0.,  0., -1., -0.,  0., -0., -0., -0.,  1.,  0., -0.,  0.,
         0., -0.,  0.,  0., -0.,  0.,  0., -0., -1., -0., -0., -0., -0.,
         0.,  0.,  0., -0.,  0., -0., -0., -0., -0.,  0.,  0., -0.,  0.,
        -0., -0., -0.,  0.,  0., -0., -1.,  1., -0., -0.,  1.,  0., -0.,
        -0., -0.,  0.,  0., -0.,  1., -0., -0.,  0., -0., -0.,  0.,  0.,
        -0., -0.,  0.,  0.,  0., -0.,  0., -0.,  1., -0., -0., -0., -0.,
         0., -0.]], dtype=np.float32), np.array([[-0., -0., -0.,  0.,  0., -0.,  0., -1.,  0.,  1., -0.,  0.,  1.,
        -0., -0.,  1., -0., -0., -0.,  0.,  0.,  1., -0., -0., -0., -0.,
        -0.,  1., -0.,  0., -1., -0., -0., -0., -0., -0.,  0., -0.,  0.,
        -0., -0., -0.,  0.,  0.,  0., -0., -0.,  0.,  0.,  0., -1., -0.,
         0., -0.,  0., -1., -0., -0.,  0., -0., -0.,  0.,  0.,  0.,  0.,
        -0.,  0., -0.,  0., -0., -0., -0.,  0.,  0.,  0.,  0.,  0., -0.,
        -0.,  0.,  0., -0.,  0., -0.,  0., -0., -0.,  0., -1.,  0., -1.,
         0., -0.],
       [ 0., -0.,  0., -0.,  0., -0., -0., -0., -0., -0.,  0., -0.,  1.,
        -0., -1.,  0., -1., -0., -0., -0., -0., -0., -0., -0.,  0., -0.,
         0., -0., -0.,  0., -0., -0.,  0., -0., -0., -0.,  0.,  0., -1.,
         0.,  0., -0.,  0., -0., -0., -0., -0., -0.,  0., -0.,  0., -1.,
         0., -0., -0., -1., -0.,  0., -0.,  1.,  1.,  0., -0.,  0., -0.,
        -0.,  0.,  0., -0.,  0., -0.,  0.,  0.,  0., -0., -0.,  0., -0.,
         0., -0.,  0., -0.,  0.,  0., -0., -0.,  1.,  0., -0.,  1.,  0.,
        -0.,  0.],
       [-0., -0.,  0.,  0., -0.,  0.,  0., -0.,  0.,  0.,  0.,  0.,  0.,
        -0., -0., -0., -0.,  0.,  0.,  0., -0., -0., -0.,  0.,  0.,  0.,
        -1.,  1.,  0., -0., -0., -0., -0.,  0.,  0.,  0.,  1., -1.,  0.,
        -0., -1.,  0.,  0., -0.,  0.,  0., -0.,  0.,  0., -0., -0., -0.,
         0.,  0.,  0., -0.,  1., -0., -0., -0., -0., -0., -0., -0.,  0.,
         0., -1.,  0., -0.,  0., -0., -0., -0.,  0., -0., -0.,  1.,  0.,
         1., -0.,  0., -0.,  0.,  0., -0., -0., -0.,  0., -1., -0., -1.,
        -0.,  0.],
       [-0.,  0.,  0.,  0.,  0., -0.,  0., -1.,  0.,  1., -0.,  0.,  0.,
         0.,  1.,  1.,  1., -0.,  0.,  0., -0.,  1., -0., -0., -0.,  0.,
        -0.,  0.,  0.,  0., -1.,  0.,  0., -0., -0.,  0.,  0.,  1.,  0.,
        -0.,  1.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -0., -0., -0.,  1.,
         0., -0., -0., -0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0.,
         0., -0.,  0.,  0.,  0., -0., -0., -1.,  0.,  0.,  0., -1.,  0.,
        -0., -0.,  0., -0., -0., -0.,  0., -0., -1., -0.,  0., -1.,  0.,
         0.,  0.],
       [ 0., -1., -0.,  0.,  0., -0., -0.,  1., -0., -1., -0., -0., -1.,
         0.,  0., -1., -0.,  0., -0., -0.,  0., -1.,  0., -0., -0.,  1.,
         0.,  0.,  0.,  0.,  1., -0., -0., -0., -0.,  0., -0., -1., -0.,
         0., -1., -1.,  0., -0., -0.,  0., -0.,  0., -0., -0.,  1.,  0.,
         1., -0.,  0.,  1.,  1., -1.,  0.,  0., -0., -0.,  0.,  1.,  0.,
        -0., -0., -0.,  0., -0., -0., -0.,  0., -0., -0., -0.,  1.,  0.,
         0., -0., -0., -0., -0.,  0., -0., -0.,  0., -0.,  0., -0., -0.,
        -0.,  0.],
       [ 0., -0., -0., -0., -0., -0., -0., -0., -0.,  0.,  1.,  0.,  1.,
        -0.,  0.,  0.,  0.,  1.,  0., -1.,  1., -0., -0.,  0.,  0., -0.,
        -0.,  1., -0., -0., -0., -0., -0.,  0., -0., -0., -0.,  0.,  0.,
        -0., -0.,  0.,  0.,  0.,  0., -0., -0., -1., -0., -0., -0.,  0.,
        -0., -0.,  0., -0.,  0., -0.,  0.,  0., -0.,  0.,  0., -0., -0.,
         0.,  0.,  0.,  0.,  1.,  0.,  0., -0.,  0., -0., -0.,  0.,  0.,
        -0.,  0.,  0., -1., -0., -0.,  0.,  0.,  0., -1., -1., -0.,  0.,
         0.,  1.],
       [ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -0.,  0., -0., -0.,  1.,
         0., -0., -1.,  0.,  0., -0., -1.,  1., -0., -0.,  0., -0.,  0.,
        -0.,  0., -0., -0., -0., -0.,  0.,  0., -0., -0., -0., -0.,  0.,
         0.,  0., -0., -0.,  0.,  0., -0., -0., -0.,  0., -0., -0.,  0.,
        -0.,  0.,  0., -0., -0.,  0., -0.,  0., -0., -0., -0., -0., -0.,
         0., -0., -0., -0.,  1.,  0., -0., -0.,  0.,  0., -0.,  0.,  1.,
         0., -0., -0., -1., -0.,  0., -0., -0.,  0., -1., -1.,  1.,  0.,
         0.,  0.],
       [ 0., -0., -1.,  0., -0., -0., -0., -0.,  0.,  0.,  1., -1.,  0.,
        -0., -0.,  0.,  0.,  0.,  0., -0., -0.,  0., -0., -1., -1.,  0.,
         0., -0., -0.,  0., -0.,  0., -1.,  0., -0., -0., -0., -0., -0.,
         0., -0., -0.,  0.,  0., -0.,  1.,  0., -0.,  0., -0.,  0.,  0.,
        -0., -0., -0., -0., -0., -0., -0., -0., -0.,  0.,  0.,  0., -0.,
        -0., -0.,  0., -1., -0.,  0.,  0.,  0.,  0., -0.,  0.,  0., -1.,
        -0., -0., -0.,  0.,  1.,  0., -0., -0.,  0.,  0.,  0.,  0., -0.,
         0.,  1.],
       [ 0., -0., -1., -0., -1.,  0.,  0., -0., -0.,  1., -0., -0.,  0.,
        -0.,  0.,  1.,  0., -1., -0., -0.,  0.,  0.,  0.,  0.,  0.,  0.,
        -0., -1.,  0., -0., -0., -0.,  0., -0., -0., -0.,  0., -0.,  0.,
         0.,  1., -0.,  0.,  0.,  1., -0.,  0.,  1., -0., -0., -0.,  1.,
        -0.,  0., -0.,  0.,  0., -0.,  0., -0., -0., -0.,  0., -0.,  0.,
         0., -0., -0.,  0., -0.,  0.,  0.,  0., -0.,  0.,  0., -0.,  0.,
         0., -0., -0., -0., -0., -0., -0.,  0., -0.,  0.,  0., -1., -0.,
        -0., -0.],
       [ 0.,  0., -1., -0.,  0.,  0.,  0.,  0., -0.,  0., -0., -0., -1.,
        -0., -0., -0., -0., -1., -0.,  1., -1.,  0., -0., -1., -0., -0.,
         0., -1., -0.,  0.,  0., -0.,  0., -1.,  0.,  0.,  0.,  0., -0.,
        -0.,  0.,  0.,  0., -0.,  0., -0.,  0.,  1., -1., -0.,  0., -0.,
         0., -0., -1.,  0.,  0.,  0., -0., -0.,  0., -0., -0.,  0.,  0.,
        -0., -0., -0.,  0., -1.,  0., -1., -0.,  0., -0.,  0., -0., -1.,
        -0., -0., -0.,  1., -0., -0., -0.,  0.,  0.,  1.,  1.,  0., -0.,
         1., -0.],
       [ 0.,  0., -0.,  0.,  0.,  0.,  1.,  0., -0., -0.,  0.,  0., -1.,
         0., -0., -1., -0., -0., -0., -0.,  0., -0., -0.,  0., -0., -0.,
        -0., -1., -0., -1.,  1., -0.,  0., -1., -0., -0., -0.,  0.,  0.,
        -0.,  0., -0., -0., -0., -0., -0., -0.,  0., -0., -1., -0.,  0.,
        -0., -0., -0.,  1.,  0.,  1.,  0., -0., -0.,  0.,  0., -0., -0.,
         0., -0.,  0., -0., -0.,  0., -0., -0., -0., -1.,  0., -0., -0.,
         0.,  0.,  0., -0.,  0.,  0.,  0., -0., -0.,  0.,  1., -0.,  1.,
         0.,  0.],
       [ 0., -1.,  0., -0.,  0.,  1.,  0., -0., -0.,  0.,  0.,  0., -1.,
        -0.,  1.,  0.,  1.,  0., -0.,  0.,  0.,  0., -1., -0., -0.,  0.,
        -0.,  0.,  0., -0.,  0.,  0., -0.,  0., -0., -0.,  0.,  0., -0.,
         0., -0.,  0.,  0., -0.,  0., -0., -0., -0.,  1.,  0.,  0., -0.,
        -0.,  0.,  0.,  1.,  0.,  0., -0., -0., -0.,  0.,  0., -0., -0.,
         0.,  0.,  0., -0.,  0., -0., -0.,  0.,  1., -0.,  1.,  0.,  0.,
         0.,  0.,  0.,  0., -0., -0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,
         0., -0.],
       [ 0.,  0.,  0., -0.,  0.,  0.,  0.,  0., -0., -0.,  0.,  0.,  0.,
         1.,  0.,  0.,  0., -0., -0.,  0., -0.,  0.,  0.,  0., -0.,  0.,
         1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1., -1., -0.,  0.,
        -0.,  0.,  0.,  1., -0., -0., -0., -1.,  0., -0., -0., -0., -0.,
        -0.,  0.,  0., -0., -0.,  0., -0.,  0., -0., -0.,  0.,  1.,  0.,
        -0.,  1.,  0.,  0.,  0.,  0.,  0., -0.,  0., -1.,  0., -1.,  0.,
        -1.,  0.,  1.,  0., -0., -0., -0.,  0.,  0.,  0.,  1.,  0.,  1.,
        -1.,  0.],
       [-0.,  0., -0.,  0., -0., -0.,  0.,  1., -1., -1., -0., -0.,  0.,
        -0., -1., -1., -1.,  0., -0.,  0.,  0., -1., -0., -0.,  0., -0.,
         0., -0., -0.,  0.,  1.,  0.,  0., -0., -0., -0.,  0., -1.,  0.,
        -0., -1.,  1., -0., -0., -1., -0., -0.,  0.,  0., -0.,  0., -1.,
        -0.,  1., -0.,  0., -0.,  0.,  1.,  1.,  1.,  1.,  1., -0., -0.,
         0.,  0.,  0., -0., -0., -0., -1.,  1.,  0., -0., -0.,  1., -0.,
         0.,  0.,  0., -0.,  0., -0., -0.,  1.,  1.,  0.,  0.,  1., -0.,
        -0., -0.],
       [ 0.,  1., -0.,  0.,  0.,  0., -1.,  0., -0., -0., -0., -0.,  1.,
         1., -0.,  1.,  0., -0., -0.,  0., -0.,  0., -0., -0.,  0., -0.,
         0., -0., -0.,  1., -1., -1., -0.,  1., -0., -0., -0.,  0.,  0.,
         0., -0.,  1., -0., -0., -0., -0.,  0.,  0., -0., -0.,  0.,  0.,
         0., -0., -0., -1.,  0., -0.,  0., -0.,  0., -0., -0.,  0.,  0.,
         0., -0.,  0.,  0., -0.,  0.,  0.,  0., -1.,  0.,  0., -1.,  0.,
        -0.,  0.,  0.,  0., -0.,  0.,  0., -0., -0.,  0., -0., -0.,  0.,
        -1.,  0.],
       [ 0.,  0., -0.,  0., -0., -0.,  0., -0.,  0.,  0., -0., -0., -0.,
         0., -0.,  1., -0., -1., -0.,  1.,  0., -0.,  0.,  0., -0., -0.,
        -0.,  0., -0., -0., -1.,  0., -0.,  0., -0.,  0., -0.,  0., -0.,
        -0.,  0.,  0.,  0., -0.,  0.,  0., -0.,  1.,  0., -0., -0.,  0.,
        -0.,  0.,  0., -1., -0.,  0.,  0.,  0.,  0., -0.,  0., -0.,  1.,
        -0., -0.,  0.,  0., -1., -0., -0., -0., -0., -0., -0., -0.,  0.,
        -0.,  0., -0.,  1.,  0.,  0., -0.,  0., -0.,  1., -0.,  0.,  0.,
         0., -1.],
       [-0., -0., -0., -0., -1.,  0.,  0., -0., -0., -0.,  0., -0., -0.,
         0., -1.,  1.,  0., -0.,  0.,  1., -0.,  0.,  0.,  0.,  0., -0.,
        -0.,  0.,  0.,  0.,  0., -0.,  0., -0.,  0., -0., -0., -0., -0.,
         0.,  0., -0., -0.,  0., -0.,  0., -0.,  0.,  0., -0., -0., -0.,
        -0.,  0.,  0., -1.,  0., -0., -0., -0., -0., -0.,  0.,  0.,  0.,
         0., -0.,  0.,  0., -0., -0., -0., -0.,  0., -0., -0.,  0.,  0.,
         0., -0., -0.,  1.,  0., -0., -0.,  0.,  0.,  1., -0., -0.,  0.,
        -0., -0.],
       [-0.,  0.,  0.,  0.,  0., -0.,  0., -0.,  0., -0.,  0., -0.,  0.,
         0., -0.,  0., -0.,  0.,  1.,  0.,  0., -0., -0., -0., -0., -0.,
         0.,  0., -0., -0., -0.,  0.,  0.,  0., -0., -0., -0.,  0.,  0.,
        -1., -0., -0.,  0.,  0.,  0., -0., -0.,  1., -0., -0.,  0., -0.,
         0., -0., -0.,  0.,  0.,  0.,  0., -0., -0.,  0., -0.,  0.,  1.,
        -1., -0.,  0., -0., -1., -0., -0., -0., -0.,  0.,  0.,  1.,  0.,
        -0.,  1.,  0.,  0.,  0., -1., -0., -0., -0., -0., -0., -0.,  0.,
         0., -1.],
       [-0.,  0., -0., -0.,  1., -0., -0., -0.,  0.,  0., -0.,  0., -0.,
         0.,  1., -0.,  0.,  1., -0.,  0.,  0.,  1., -0., -0.,  0.,  0.,
         0., -0.,  0.,  0., -1., -0., -0.,  0., -0., -0.,  0.,  1., -0.,
         0.,  0.,  0., -0.,  0., -0., -0.,  0., -0., -0., -0., -0., -0.,
        -0., -1.,  0.,  0.,  0.,  0., -0.,  0., -1., -0.,  0.,  0.,  0.,
        -0., -0.,  0.,  0.,  0., -0., -0., -1., -0., -0.,  0., -1., -0.,
         0., -0., -0., -0.,  0.,  0.,  0., -0., -0.,  0., -0.,  0., -0.,
         0., -0.],
       [-0., -0.,  0., -0., -0., -0., -0.,  0., -0.,  0., -0.,  0.,  0.,
        -1.,  0., -1.,  0.,  1.,  0., -1.,  0.,  0., -0.,  0.,  0., -0.,
        -0.,  0.,  0., -1.,  1.,  1., -0.,  0.,  0., -0., -0.,  0.,  0.,
         0., -0.,  0.,  0., -0.,  0., -0., -0., -0., -0., -0., -0.,  0.,
        -0., -0.,  0.,  1.,  0.,  0., -0., -0., -0.,  0.,  0., -0.,  0.,
        -0., -0.,  1.,  0., -0., -0., -0.,  0., -0., -0., -1.,  1.,  0.,
         0., -0., -0., -1.,  0., -0.,  0.,  1., -0., -1., -0., -0., -0.,
         0., -0.],
       [-1., -0.,  0., -0., -0., -0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,
        -0.,  0.,  0.,  0.,  1., -1., -1., -0., -0., -0., -0.,  0., -0.,
        -1.,  1.,  0., -0., -0.,  0.,  0., -0.,  0.,  0.,  0.,  0., -0.,
        -0.,  0.,  0., -0., -0., -0., -0.,  0., -1., -0., -0., -0., -0.,
        -0., -0.,  0.,  0.,  0., -0., -0.,  0.,  0., -0., -0.,  0., -1.,
         0.,  0., -0., -0.,  1.,  1., -0., -0.,  0.,  1.,  0., -0., -0.,
        -0.,  0., -1., -1., -1.,  0., -0.,  0.,  0., -1., -1.,  0., -1.,
        -0.,  1.],
       [ 0., -0., -0.,  0.,  1.,  0.,  0.,  0.,  0., -0., -0., -0.,  1.,
        -0.,  0., -1., -1.,  0.,  0., -1., -0., -0.,  0., -0., -1.,  0.,
         0., -0., -1., -0.,  0., -0.,  0., -0.,  0., -0., -0.,  0., -0.,
         0.,  0.,  0.,  0., -0.,  0., -0., -1., -0.,  0.,  0.,  0.,  0.,
         0.,  0., -0.,  0.,  0., -0., -0., -0.,  0., -0., -0., -0., -0.,
        -1.,  0.,  0., -0.,  0., -0.,  0., -0., -0., -0.,  0.,  0., -0.,
        -1., -0., -0., -1., -0.,  0., -0.,  0.,  0., -1.,  0.,  1., -0.,
         0., -0.],
       [-1., -0.,  0.,  0., -0., -0., -0.,  0., -0.,  0., -0., -0.,  0.,
        -0.,  0.,  0.,  0., -0., -1.,  0.,  0., -0., -0., -0.,  0.,  0.,
        -1.,  1., -0.,  0., -0., -0.,  0.,  0., -0.,  0.,  0., -0.,  0.,
        -0.,  0.,  0.,  0.,  0.,  0., -0.,  1., -1.,  0.,  0., -0., -0.,
         0., -0.,  0., -0.,  0., -0., -0.,  0.,  0.,  0., -0., -0., -1.,
         1., -1.,  0., -1.,  1.,  0., -0.,  0.,  0.,  1., -0., -0.,  0.,
         1., -1., -1.,  0., -0.,  1., -0., -0., -0.,  0., -1.,  0., -1.,
         0.,  1.],
       [-0.,  0., -0., -0., -1., -0.,  0., -1.,  0.,  1., -0.,  0.,  0.,
        -0.,  0.,  1.,  1., -1., -0., -0.,  0., -0., -0.,  0., -0.,  0.,
        -0.,  0., -0., -0., -0., -0., -0., -0.,  0., -0.,  0.,  0., -0.,
        -0.,  1.,  0.,  0.,  0.,  1., -1., -0., -0., -0., -0.,  0.,  1.,
        -0., -0.,  0.,  0.,  0., -0., -1.,  0., -0., -0.,  0.,  0.,  0.,
         0., -1.,  0., -0.,  0.,  0., -0.,  0., -0., -0., -0.,  0., -0.,
        -0., -0.,  0., -0.,  0.,  1.,  1.,  0., -1., -0.,  0., -1.,  0.,
        -0.,  0.],
       [-0.,  0.,  0.,  1., -0., -1.,  1.,  0., -1.,  0.,  0.,  1., -1.,
        -0., -0.,  0., -0., -1., -0.,  1., -0., -0.,  0.,  0.,  1.,  0.,
        -0., -0.,  1.,  0.,  0.,  0., -0., -1.,  1.,  0., -0., -0.,  0.,
         0.,  0.,  0.,  0., -0., -0., -1.,  1., -0., -1., -0., -0., -0.,
         0., -0., -1.,  0., -0., -0., -0.,  0.,  0.,  0.,  0.,  0.,  0.,
         1., -1., -0., -0.,  0., -0., -1., -0., -0., -0., -0.,  0., -0.,
         1., -1.,  0.,  1.,  0.,  1.,  1.,  0.,  0.,  1.,  0., -0., -0.,
         1., -0.]], dtype=np.float32))

def comment(s: str = ""):
    w(f"# {s}")


def get_complex_term_verbatim(name: str, a: np.array, 
             rows: int, cols: int, product: int) -> str:
    s = ""    
    idx = 0
    eps = 0.00001

    assert a.dtype == np.complex64, "oops!"

    for row in range(rows):
        for col in range(cols):
            v = a[idx, product]

            if abs(v) > eps:
                lit = literal(name, row, col) 
                sv = str(v)
                s += f" + {sv}*{lit}"
            idx += 1

    return f"({s})"


def get_complex_term(name: str, a: np.array, 
             rows: int, cols: int, product: int) -> str:
    s = ""    
    idx = 0
    eps = 0.00001

    assert a.dtype == np.complex64, "oops!"

    for row in range(rows):
        for col in range(cols):
            v = a[idx, product]

            if abs(v) > eps:
                lit = literal(name, row, col)
                if v.real < 0:
                    sv = "-" + str(-v).replace("-0j", "")
                else:
                    sv = str(v).replace("+0j", "")

                if "j" not in sv:
                    sv = sv.replace("(", "").replace(")", "")

                if s == "":
                    s = f"{sv}*{lit}"
                elif sv.startswith("-"):
                    s += f" - {sv[1:]}*{lit}"
                else:
                    s += f" + {sv}*{lit}"
            idx += 1

    if s == "":
        return "(verbatim: " + get_complex_term_verbatim(name, a, rows, cols, product) + ")"

    return f"({s})"


def get_complex_term_mod2(name: str, a: np.array, 
             rows: int, cols: int, product: int) -> str:
    s = ""    
    idx = 0
    eps = 0.00001

    assert a.dtype == np.complex64, "oops!"

    for row in range(rows):
        for col in range(cols):
            v = a[idx, product]

            if abs(v) > eps:
                lit = literal(name, row, col)
                v = 1
                if s == "":
                    s = f"{lit}"
                else:
                    s += f" + {lit}"
            idx += 1

    if s == "":
        return "(verbatim: " + get_complex_term_verbatim(name, a, rows, cols, product) + ")"

    return f"({s})"


def get_term(name: str, a: np.array, 
             rows: int, cols: int, product: int) -> str:
    s = ""    
    idx = 0

    if a.dtype == np.complex64:
        return get_complex_term(name, a, rows, cols, product)

    for row in range(rows):
        for col in range(cols):
            v = a[idx, product]

            if v != 0:
                v = int(v)
                lit = literal(name, row, col)
                if s == "":
                    if v > 0:
                        assert v == 1, "v != 1"
                        s = lit
                    else:
                        assert v == -1, "v != -1"
                        s = f"- {lit}"
                elif v > 0: 
                    assert v == 1, "v != 1"
                    s += f" + {lit}"
                elif v < 0:
                    assert v == -1, "v != -1"
                    s += f" - {lit}"
                else:
                    assert False, f"Strange value! {v}"
            idx += 1

    return f"({s})"


def get_term_mod2(name: str, a: np.array, 
             rows: int, cols: int, product: int) -> str:
    s = ""    
    idx = 0

    if a.dtype == np.complex64:
        return get_complex_term_mod2(name, a, rows, cols, product)

    for row in range(rows):
        for col in range(cols):
            v = a[idx, product]

            if v != 0:
                v = 1
                lit = literal(name, row, col)
                if s == "":
                    s = lit
                else: 
                    s += f" + {lit}"
            idx += 1

    return f"({s})"


"""
The Tuple sh carries three np.arrays
Their dimensions are read and passed to the caller
TO DO: For the time being, this assumes square-shaped matrices n x n
"""
def get_problem_dimensions(sh: Tuple, transpose_c: bool):
    a: np.array = sh[0]
    ra, ca = a.shape
    o("a shape " + str(a.shape))

    b: np.array = sh[1]
    rb, cb = b.shape
    o("b shape " + str(b.shape))

    c: np.array = sh[2]
    rc, cc = c.shape
    o("c shape " + str(c.shape))

    a_rows = math.isqrt(ra)
    a_cols = a_rows
    b_cols = math.isqrt(rb)
    products = ca

    b_rows = rb // b_cols

    if transpose_c:
        transpose_array(c, a_rows, b_cols, products)
    c_rows = a_rows
    c_cols = b_cols

    assert ca == cb, "a and b should have the same number of columns"
    assert ca == cc, "a and c should have the same number of columns"
    assert ca == products, "a columns should match number of products"
    assert ra == a_rows * a_cols, "unexpected ra"
    assert rb == b_rows * b_cols, "unexpected rb"
    assert rc == c_rows * c_cols, "unexpected rc"
    assert a_rows == c_rows, "mismatch a_rows c_rows"
    assert a_cols == b_rows, "mismatch a_cols b_rows"
    assert b_cols == c_cols, "mismatch b_cols c_cols"

    return a, ra, a_cols, \
           b, rb, b_cols, \
           c, rc, c_cols, \
           products


def literal(name: str, row: int, col: int) -> str:
    return f"{name}{row+1}{col+1}"


def o(s: str = ""):
    print(s)


def pretty_3_num(i):
    if i < 0:
        return f"-{pretty_3_num(-i)}"
    if i < 1000:
        return str(i)
    return f"{pretty_3_num(i % 1000)},{str(i % 1000).zfill(3)}"


def transpose_array(a: np.array, rows: int, cols: int, products: int) -> None:
    for row in range(rows):
        for col in range(cols):
            if row != col:
                ic = row*cols + col
                ict = col*rows + row
                
                for k in range(products):
                    tmp = a[ic, k]
                    a[ic, k] = a[ict, k]
                    a[ict, k] = tmp


def validate_algorithm(ra: int, a_cols: int, 
                       rb: int, b_cols: int, 
                       rc: int, c_cols: int, 
                       products: int, 
                       a: np.array, 
                       b: np.array, 
                       c: np.array):
    """ check if Brent Equations are fulfilled """
    err_cnt = 0
    ok_cnt = 0
    eqn = 0
    for ia in range(ra):
        a_row = ia // a_cols
        a_col = ia % a_cols
        for ib in range(rb):
            b_row = ib // b_cols
            b_col = ib % b_cols
            for ic in range(rc):
                c_row = ic // c_cols
                c_col = ic % c_cols
                """ tranposed index for [c] """
                ict = c_col * c_cols + c_row
                sum = 0
                for k in range(products):
                    p = a[ia, k] * b[ib, k] * c[ict, k]
                    sum += p
                odd = 1 if (a_row == c_row) and (a_col == b_row) and (b_col == c_col) else 0
                if odd != sum:
                    err_cnt += 1
                    o(f"Equation {eqn}: sum {sum} != {odd}")
                else:
                    ok_cnt += 1
                eqn += 1

    return err_cnt, ok_cnt


def validate_algorithm_mod2(ra: int, a_cols: int, 
                       rb: int, b_cols: int, 
                       rc: int, c_cols: int, 
                       products: int, 
                       a: np.array, 
                       b: np.array, 
                       c: np.array):
    """ check if Brent Equations are fulfilled """
    err_cnt = 0
    ok_cnt = 0
    eqn = 0
    eps = 0.001
    for ia in range(ra):
        a_row = ia // a_cols
        a_col = ia % a_cols
        for ib in range(rb):
            b_row = ib // b_cols
            b_col = ib % b_cols
            for ic in range(rc):
                c_row = ic // c_cols
                c_col = ic % c_cols
                """ tranposed index for [c] """
                ict = c_col * c_cols + c_row
                sum = 0
                s = f"{a_row+1}{a_col+1}{b_row+1}{b_col+1}{c_col+1}{c_row+1}: "
                for k in range(products):
                    f = a[ia, k]
                    g = b[ib, k]
                    d = c[ict, k]
                    p = f * g * d
                    if abs(p) > 0:
                        sum += 1
                        s += f" + {p}"
                odd = 1 if (a_row == c_row) and (a_col == b_row) and (b_col == c_col) else 0
                if odd != (sum % 2):
                    err_cnt += 1
                    o(f"Equation {eqn}: sum {sum} % 2 != {odd}")
                    o(s)
                else:
                    ok_cnt += 1
                eqn += 1

    return err_cnt, ok_cnt


def w(s: str = ""):
    """ write a line to the tensor output file """
    global wrf_line_count
    wrf.write(f"{s}\n")
    wrf_line_count += 1
    print(s)


def write_tensor_file(ra: int, a_cols: int, 
                      rb: int, b_cols: int, 
                      rc: int, c_cols: int,
                      products: int, transpose_c: bool,
                      a: np.array, b: np.array, c: np.array,
                      err_cnt: int, ok_cnt: int) -> None:    
    global wrf   #  output file for w() and comment()

    a_rows = ra // a_cols
    b_rows = rb // b_cols
    c_rows = rc // c_cols
    file_name = f"s{a_rows}x{a_cols}x{b_cols}_{products}.tensor.txt"
    with open(file_name, "wt", encoding="ascii") as f:
        wrf = f
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        comment(f"Matrix multiplication scheme in tensor form: '{file_name}'")
        comment()
        comment(f"Created: {now}")
        comment()
        if transpose_c:
            comment("[c] is processed in transposed form")
        else:
            comment("[c] is processed in original order, no transposition")
        if a.dtype == np.complex64:
            comment("Coefficients are complex numbers")
        if err_cnt != 0:
            comment()
            comment("Error(s) detected:")
            comment(f"Unfulfilled Brent Equations: {pretty_3_num(err_cnt)}")
        else:
            comment("Algorithm is valid!")
        comment(f"Fulfilled Brent Equations: {pretty_3_num(ok_cnt)}")
        comment()
        w()

        for product in range(products):
            ta = get_term("a", a, a_rows, a_cols, product)
            tb = get_term("b", b, b_rows, b_cols, product)
            tc = get_term("c", c, c_rows, c_cols, product)
            o(f"{product+1}:")
            w(f"{ta}*{tb}*{tc}")

        w()
        comment(f"end of file '{file_name}', lines: {wrf_line_count + 2}")
        w()


def write_tensor_file_mod2(ra: int, a_cols: int, 
                      rb: int, b_cols: int, 
                      rc: int, c_cols: int,
                      products: int, transpose_c: bool,
                      a: np.array, b: np.array, c: np.array,
                      err_cnt: int, ok_cnt: int) -> None:    
    global wrf   #  output file for w() and comment()

    a_rows = ra // a_cols
    b_rows = rb // b_cols
    c_rows = rc // c_cols
    file_name = f"s{a_rows}x{a_cols}x{b_cols}_{products}.tensor.mod2.txt"
    with open(file_name, "wt", encoding="ascii") as f:
        wrf = f
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        comment(f"Matrix multiplication scheme in tensor form: '{file_name}'")
        comment()
        comment(f"Created: {now}")
        comment("Modus: modulo 2")
        comment()
        if transpose_c:
            comment("[c] is processed in transposed form")
        else:
            comment("[c] is processed in original order, no transposition")
        if a.dtype == np.complex64:
            comment("Coefficients are complex numbers")
        if err_cnt != 0:
            comment()
            comment("Error(s) detected:")
            comment(f"Unfulfilled Brent Equations: {pretty_3_num(err_cnt)}")
        else:
            comment("Algorithm is valid!")
        comment(f"Fulfilled Brent Equations: {pretty_3_num(ok_cnt)}")
        comment()
        w()

        for product in range(products):
            ta = get_term_mod2("a", a, a_rows, a_cols, product)
            tb = get_term_mod2("b", b, b_rows, b_cols, product)
            tc = get_term_mod2("c", c, c_rows, c_cols, product)
            o(f"{product+1}:")
            w(f"{ta}*{tb}*{tc}")

        w()
        comment(f"end of file '{file_name}', lines: {wrf_line_count + 2}")
        w()


def main():
    global wrf
    transpose_c = True
    sh: Tuple = decomposition_444
    # sh: Tuple = decomposition_555

    """ derive problem dimensions from data shape """
    a, ra, a_cols, \
    b, rb, b_cols, \
    c, rc, c_cols, \
    products = get_problem_dimensions(sh, transpose_c)

    """ check if Brent Equations are fulfilled """
    err_cnt, ok_cnt = \
        validate_algorithm(ra, a_cols, 
                           rb, b_cols, 
                           rc, c_cols, 
                           products, 
                           a, b, c)

    write_tensor_file(ra, a_cols,
                      rb, b_cols,
                      rc, c_cols,
                      products,
                      transpose_c,
                      a, b, c,
                      err_cnt, ok_cnt)

    err_cnt, ok_cnt = \
        validate_algorithm_mod2(ra, a_cols, 
                           rb, b_cols, 
                           rc, c_cols, 
                           products, 
                           a, b, c)

    write_tensor_file_mod2(ra, a_cols,
                      rb, b_cols,
                      rc, c_cols,
                      products,
                      transpose_c,
                      a, b, c,
                      err_cnt, ok_cnt)
    o()
    o("Ciao!")
    o()
    exit(0)


if __name__ == "__main__":
    main()
