# Matrix multiplication scheme in tensor form: 's3x4x7_63.tensor.txt'
# 
# Created: 2025-05-23 23:16
# 
# [c] is processed in transposed form
# Coefficients are complex numbers
# Algorithm is valid!
# Fulfilled Brent Equations: 7,056
# 

(-1*a21 - 1j*a24)*(1j*b17 - 1*b37 + 1*b47)*(-0.5*c12 + 0.5*c22 - 0.5*c42 - 0.5*c62 + 0.5j*c72)
(-1*a11 - 0.5*a12 + 1j*a21 + 0.5j*a22)*(0.5*b12 + 1*b14 - 1j*b15 - 1j*b17 + 1*b22 + 0.5j*b32 + 0.5j*b42)*(-1*c21 + 1*c61 - 1j*c71)
(-0.5j*a22 - 1*a24 + 0.5*a32 - 1j*a34)*(-0.5j*b11 - 1j*b21 - 0.5*b31 + 0.5*b41 - 1j*b43 - 1*b46 + 1j*b47)*(1j*c13 + 1j*c43 + 1*c73)
(1j*a11 - 1*a13)*(-1*b15 - 0.5*b17 + 1*b32 + 0.5j*b37 - 0.5j*b47)*(-1*c21 + 1j*c51 - 1j*c71)
(0.5j*a12 + 1*a14 + 0.5j*a32 + 1*a34)*(0.5*b11 + 0.5*b14 + 1*b21 - 1*b24 - 0.5j*b31 - 0.5j*b34 + 0.5j*b41 + 1*b43 - 0.5j*b44 - 1j*b46 - 1*b47)*(1j*c43)
(1*a31 + 1j*a34)*(1j*b11 + 0.5*b17 + 0.5j*b37 + 1*b46 - 0.5j*b47)*(-1j*c13 - 1j*c63 - 1*c73)
(1*a31 + 0.5*a32)*(1*b16 + 1j*b36 + 1j*b46)*(-1*c61 - 1j*c62 + 1*c63)
(-1j*a21 - 0.5j*a22 + 1*a31 + 0.5*a32)*(0.5j*b16 + 1*b17 + 1j*b26 + 0.5*b36 + 0.5*b46)*(1*c62)
(-0.5*a22 + 1j*a24 + 0.5j*a32 - 1*a34)*(0.5j*b11 + 1j*b21 + 0.5*b31 - 0.5*b41)*(1j*c12 - 1*c13 - 1*c43 + 1j*c73)
(0.5*a12 - 1j*a13 + 0.5*a32 + 1j*a34)*(-0.5j*b17 + 1j*b31 + 0.5*b37 + 1*b45 + 0.5*b47)*(1*c11 - 1j*c53)
(0.5*a32 + 1j*a33)*(1*b13 + 1j*b33 - 1j*b43)*(1*c31 + 1j*c32 - 1*c33)
(-0.5j*a22 - 1*a23 + 0.5*a32 - 1j*a33)*(-0.5*b13 - 1*b23 + 1*b31 - 0.5j*b33 + 1*b36 - 1j*b37 + 0.5j*b43)*(-1*c33 + 1*c53 - 1*c73)
(-0.5j*a32 + 1*a34)*(1j*b11 + 1*b31 - 1*b41)*(1*c11 + 1j*c12 - 1*c13)
(0.5*a12 - 1j*a13 - 1j*a21 - 0.5j*a22)*(-1j*b15 - 0.5j*b17 - 0.5*b37 + 0.5*b47)*(-1*c21 + 1*c61 - 1j*c71 - 1*c52)
(1*a11 + 1j*a14)*(1j*b14 + 0.5*b17 + 0.5j*b37 - 1*b42 - 0.5j*b47)*(1j*c21 - 1j*c41 - 1*c71)
(-1*a21 + 0.5*a22 - 1j*a31 - 0.5j*a32)*(-0.5j*b16 + 1j*b26 + 0.5*b36 + 0.5*b46)*(-1j*c62 - 1*c23 + 1*c63 - 1j*c73)
(-1j*a11 + 0.5j*a12 - 1j*a31 - 0.5j*a32)*(0.5j*b12 - 0.5j*b16 + 1j*b22 + 1j*b26 - 0.5*b32 + 0.5*b36 - 0.5*b42 + 0.5*b46)*(-1*c61 + 1*c23)
(0.5j*a12 + 1*a13 + 0.5j*a32 + 1*a33)*(-0.5*b13 + 0.5*b15 - 1*b23 - 1*b25 + 1*b31 - 0.5j*b33 - 0.5j*b35 + 1*b36 - 1j*b37 + 0.5j*b43 - 0.5j*b45)*(1j*c53)
(1*a11 - 0.5*a12 + 0.5j*a22 - 1*a23)*(-0.5*b17 + 1*b32 + 0.5j*b37 - 0.5j*b47)*(-1*c31 + 1*c51 - 1*c71 - 1*c22)
(-1j*a21 + 0.5j*a22 + 1*a31 - 0.5*a32)*(-1*b11 - 1j*b13 + 0.5*b16 + 1j*b17 - 1*b26 + 0.5j*b36 + 0.5j*b46)*(-1*c23 + 1*c63 - 1j*c73)
(-1j*a13 - 1j*a14)*(-0.5*b17 + 1*b34 - 0.5j*b37 - 1j*b45 - 0.5j*b47)*(1j*c41 - 1*c51 + 1*c71)
(0.5*a12 - 1j*a14 + 0.5*a32 + 1j*a33)*(0.5j*b17 - 1j*b34 - 0.5*b37 + 1*b43 - 0.5*b47)*(1j*c31 + 1*c43)
(1*a11 - 0.5*a12 - 1j*a21 + 0.5j*a22)*(0.5j*b12 - 1*b17 - 1j*b22 + 0.5*b32 + 0.5*b42)*(1*c22)
(1j*a11 - 0.5j*a12 - 0.5j*a32 + 1*a34)*(-1*b11 + 0.5j*b17 - 0.5*b37 - 1j*b42 + 0.5*b47)*(1j*c11 + 1j*c23)
(-1*a21 + 0.5*a22 + 0.5j*a32 - 1*a33)*(-1j*b13 + 0.5j*b17 + 0.5*b37 - 0.5*b47)*(-1j*c32 + 1j*c23 - 1j*c63 - 1*c73)
(0.5j*a12 + 1*a13 + 0.5*a22 + 1j*a24)*(0.5j*b17 - 0.5*b37 - 1*b45 - 0.5*b47)*(-1j*c11 - 1j*c41 - 1*c71 + 1j*c52)
(1j*a32)*(-0.5j*b11 + 0.5*b13 + 0.5j*b16 - 1j*b21 + 1*b23 - 1j*b26 - 1*b27 - 0.5*b31 + 0.5j*b33 - 0.5*b36 + 0.5*b41 - 0.5j*b43 - 0.5*b46)*(1j*c73)
(0.5*a22 - 1j*a23 + 1j*a31 + 0.5j*a32)*(0.5*b17 + 1*b36 - 0.5j*b37 + 0.5j*b47)*(1j*c62 - 1j*c33 + 1j*c53 - 1j*c73)
(1*a33 + 1*a34)*(-0.5*b17 + 1*b31 - 0.5j*b37 + 1j*b43 - 0.5j*b47)*(1*c13 - 1j*c33 - 1j*c73)
(0.5*a12 - 1j*a14 - 1j*a21 - 0.5j*a22)*(1*b14 - 0.5j*b17 + 0.5*b37 - 0.5*b47)*(-1*c21 + 1*c61 - 1j*c71 + 1j*c42)
(-0.5*a12 - 1j*a13 - 0.5*a32 - 1j*a33)*(-0.5j*b13 + 0.5j*b15 - 1j*b23 - 1j*b25 - 1j*b32 - 0.5*b33 + 1j*b34 - 0.5*b35 + 1*b37 - 0.5*b43 + 0.5*b45)*(-1j*c31)
(-1*a11 + 0.5*a12 + 1j*a21 + 0.5j*a22)*(-0.5j*b12 - 1j*b22 + 0.5*b32 + 0.5*b42)*(1j*c21 - 1j*c61 - 1*c71 + 1*c22)
(0.5*a22 + 1j*a23 + 0.5j*a32 - 1*a33)*(0.5*b13 + 1*b23 - 0.5j*b33 + 1j*b37 - 0.5j*b43)*(1*c32)
(-0.5*a21 - 0.5j*a23)*(-1j*b17 - 1*b37 + 1*b47)*(-1*c22 - 1j*c32 + 1j*c52 + 1*c62 - 1j*c72)
(-1j*a11 + 0.5j*a12 + 0.5j*a32 - 1*a33)*(-1*b13 + 0.5*b17 - 1*b32 - 0.5j*b37 + 0.5j*b47)*(-1j*c31 + 1*c23)
(-0.5*a12 + 1j*a13 - 0.5j*a22 + 1*a23)*(-0.5j*b15 + 1j*b25 + 0.5*b35 - 0.5*b45)*(-1j*c31 + 1j*c51 - 1j*c71 + 1*c52)
(-0.5j*a12 + 1*a13 - 0.5*a22 - 1j*a23)*(0.5j*b15 - 1j*b25 - 1j*b32 + 1j*b34 - 0.5*b35 + 1*b37 + 0.5*b45)*(1*c31 - 1*c51 + 1*c71)
(-0.5*a12 + 1j*a14 - 0.5j*a22 + 1*a24)*(-0.5*b14 + 1*b24 + 0.5j*b34 - 0.5j*b44)*(-1*c11 - 1*c41 + 1j*c71 + 1j*c42)
(-0.5*a22 + 1j*a24 - 0.5j*a32 + 1*a33)*(-0.5*b17 - 0.5j*b37 + 1j*b43 - 0.5j*b47)*(-1*c32 - 1*c13 - 1*c43 + 1j*c73)
(-1*a12)*(0.5*b12 + 0.5*b14 - 0.5j*b15 + 1*b22 - 1*b24 + 1j*b25 + 1j*b27 + 0.5j*b32 - 0.5j*b34 + 0.5*b35 + 0.5j*b42 + 0.5j*b44 - 0.5*b45)*(1j*c71)
(-1j*a11 + 0.5j*a12)*(1*b12 + 1j*b32 + 1j*b42)*(1j*c21 + 1*c22 - 1j*c23)
(-0.5j*a12 + 1*a14 - 0.5j*a32 + 1*a34)*(-0.5j*b11 - 0.5j*b14 - 1j*b21 + 1j*b24 - 0.5*b31 - 0.5*b34 - 0.5*b41 + 1*b42 + 0.5*b44 + 1j*b45 + 1j*b47)*(-1*c11)
(-0.5*a12 + 1j*a13)*(-1j*b15 + 1*b35 - 1*b45)*(-1j*c51 - 1*c52 + 1j*c53)
(0.5*a12 - 1j*a14)*(-1j*b14 - 1*b34 + 1*b44)*(1j*c41 + 1*c42 - 1j*c43)
(-0.5j*a12 - 1*a13 + 0.5j*a32 - 1*a33)*(0.5j*b13 - 0.5j*b15 + 1j*b23 + 1j*b25 - 0.5*b33 + 0.5*b35 + 0.5*b43 - 0.5*b45)*(1*c31 - 1*c53)
(0.5*a22 - 1j*a24 + 1j*a31 + 0.5j*a32)*(0.5j*b17 - 0.5*b37 + 1j*b46 + 0.5*b47)*(1*c62 - 1j*c13 - 1j*c43 - 1*c73)
(-0.5*a22 + 1j*a23 + 0.5j*a32 - 1*a33)*(-0.5j*b13 - 1j*b23 + 0.5*b33 - 0.5*b43)*(-1j*c32 + 1*c33 - 1*c53 + 1*c73)
(1*a11 - 0.5*a12 + 1*a31 - 0.5*a32)*(-1*b11 + 0.5*b12 - 1j*b13 + 0.5*b16 + 1j*b17 - 1*b22 - 1*b26 - 0.5j*b32 + 0.5j*b36 - 0.5j*b42 + 0.5j*b46)*(1*c23)
(0.5*a12 - 1j*a14 - 0.5j*a22 + 1*a23)*(0.5j*b17 - 1j*b34 - 0.5*b37 - 0.5*b47)*(-1j*c31 + 1j*c51 - 1j*c71 + 1j*c42)
(-0.5*a12 + 1j*a14 - 1*a31 - 0.5*a32)*(1*b14 - 0.5j*b17 + 0.5*b37 - 1j*b46 - 0.5*b47)*(1*c61 - 1*c43)
(0.5j*a22 + 1*a23 - 0.5*a32 - 1j*a34)*(0.5j*b17 - 1j*b31 - 0.5*b37 - 0.5*b47)*(1j*c12 - 1j*c33 + 1j*c53 - 1j*c73)
(-0.5j*a22 + 1*a24 + 0.5*a32 + 1j*a34)*(-0.5*b11 - 1*b21 + 0.5j*b31 + 0.5j*b41 + 1*b47)*(-1j*c12)
(-0.5j*a12 - 1*a13 - 0.5*a22 + 1j*a23)*(-0.5*b15 + 1*b25 + 0.5j*b35 + 1j*b37 + 0.5j*b45)*(-1*c52)
(0.5j*a12 + 1*a14 - 0.5j*a32 + 1*a34)*(0.5j*b11 + 0.5j*b14 + 1j*b21 - 1j*b24 + 0.5*b31 + 0.5*b34 - 0.5*b41 - 0.5*b44)*(-1*c11 - 1*c43)
(1j*a11 - 0.5j*a12 - 0.5*a22 - 1j*a24)*(0.5j*b17 - 0.5*b37 - 1j*b42 + 0.5*b47)*(-1j*c11 - 1j*c41 - 1*c71 - 1*c22)
(-0.5*a12 + 1j*a14 + 0.5j*a22 + 1*a24)*(-0.5j*b14 + 1j*b24 - 0.5*b34 - 0.5*b44 + 1j*b47)*(-1*c42)
(-0.5*a23 - 0.5*a24)*(1j*b17 - 1*b37 - 1*b47)*(1j*c12 + 1*c32 + 1j*c42 - 1*c52 + 1*c72)
(-1j*a21 + 0.5j*a22 - 0.5*a32 - 1j*a34)*(-1j*b11 - 0.5*b17 - 0.5j*b37 + 0.5j*b47)*(-1*c12 - 1j*c23 + 1j*c63 + 1*c73)
(1*a11 + 0.5*a12 + 1*a31 + 0.5*a32)*(-0.5*b12 - 1*b14 + 1j*b15 - 0.5*b16 + 1j*b17 - 1*b22 - 1*b26 - 0.5j*b32 + 0.5j*b36 - 0.5j*b42 + 0.5j*b46)*(-1*c61)
(0.5*a12 - 1j*a13 + 1*a31 + 0.5*a32)*(-1j*b15 - 0.5j*b17 - 1j*b36 - 0.5*b37 + 0.5*b47)*(-1*c61 + 1j*c53)
(1*a31 + 1j*a33)*(-1j*b13 + 0.5j*b17 + 1j*b36 + 0.5*b37 - 0.5*b47)*(1j*c33 - 1*c63 + 1j*c73)
(0.5*a12 + 1j*a14 - 0.5j*a22 + 1*a24)*(-0.5*b14 + 1*b24 + 0.5j*b34 - 1j*b42 - 0.5j*b44 + 1*b45 + 1*b47)*(1*c11 + 1*c41 - 1j*c71)
(1*a22)*(1*b27)*(1*c72)

# end of file 's3x4x7_63.tensor.txt', lines: 76

